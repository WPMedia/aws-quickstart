{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "MongoDB Cluster Cloud Formation with AutoScale",
  "Parameters": {
    "ClusterReplicaSetCount": {
      "Description": "Number of Replica Set Members. Choose 1 or 3",
      "Type": "String",
      "Default": "1",
      "AllowedValues": [
        "1",
        "3"
      ]
    },
    "ClusterShardCount": {
      "Description": "Number of Shards [0,1,2,3]. 0==No Sharding. Set to > 1 for Sharding",
      "Type": "String",
      "Default": "0",
      "AllowedValues": [
        "0",
        "1",
        "2",
        "3"
      ]
    },
    "MongoDBVersion": {
      "Description": "MongoDB version",
      "Type": "String",
      "Default": "3.2",
      "AllowedValues": [
        "3.2",
        "2.6"
      ]
    },
    "ShardsPerNode": {
      "Description": "Number of Micro Shards Per Node",
      "Type": "String",
      "Default": "1",
      "AllowedValues": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10",
        "11",
        "12",
        "13",
        "14",
        "15",
        "16"
      ]
    },
    "BuildBucket": {
      "Description": "Main Bucket where the templates/scripts are installed. Do not change.",
      "Type": "String",
      "Default": "wpgames/cloud-scripts/ec2-scripts/setup/mongo/"
    },
    "KeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": "home",
      "Description": "Name of an existing EC2 KeyPair. MondoDB instances will launch with this KeyPair."
    },
    "VolumeSize": {
      "Type": "String",
      "Description": "EBS Volume Size (data) to be attached to node in GBs",
      "Default": "400"
    },
    "VolumeType": {
      "Type": "String",
      "Description": "EBS Volume Type (data) to be attached to node in GBs [io1,gp2]",
      "Default": "gp2",
      "AllowedValues": [
        "gp2",
        "io1"
      ]
    },
    "NodeServerSecurityGrp": {
      "Type": "AWS::EC2::SecurityGroup::Id",
      "Description": "Security Groups suitable for Node Servers in a Sharded Mongo Cluster. NOTE: Please make sure appropriate ports are included for a Data Node server to work correctly"
    },
    "ConfigServerSecurityGrp": {
      "Type": "AWS::EC2::SecurityGroup::Id",
      "Description": "Security Group suitable for Config Servers in a Sharded Mongo Cluster. NOTE: Please make sure appropriate ports are included for a config server to work correctly"
    },
    "Iops": {
      "Type": "String",
      "Description": "Iops of EBS volume when io1 type is chosen. Otherwise ignored",
      "Default": "100"
    },
    "ConfigServerInstanceType": {
      "Description": "Amazon EC2 instance type for the Config Server",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [
        "t2.micro",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge"
      ]
    },
    "MongoInstanceRoleName": {
      "Description": "Role description",
      "Type": "String",
      "Default": "storytools-full",
      "ConstraintDescription": "Must be a valid IAM Role valid Role with Access to EC2, S3 and DynamoDb"
    },
    "NodeInstanceType": {
      "Description": "Amazon EC2 instance type for the MongoDB nodes.",
      "Type": "String",
      "Default": "m3.medium",
      "AllowedValues": [
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge"
      ]
    },
    "VPC": {
      "Type": "AWS::EC2::VPC::Id",
      "Description": "VPC-ID of your existing Virtual Private Cloud (VPC) where you want to depoy MongoDB cluster.",
      "AllowedPattern": "vpc-[0-9a-z]{8}",
      "Default": "vpc-a02f7ac8"
    },
    "PrimaryNodeSubnet": {
      "Type": "AWS::EC2::Subnet::Id",
      "Description": "Subnet-ID the existing subnet in your VPC where you want to deploy Primary node(s).",
      "AllowedPattern": "subnet-[0-9a-z]{8}"
    },
    "Secondary0NodeSubnet": {
      "Type": "AWS::EC2::Subnet::Id",
      "Description": "Subnet-ID the existing subnet in your VPC where you want to deploy Primary node(s).",
      "AllowedPattern": "subnet-[0-9a-z]{8}"
    },
    "Secondary1NodeSubnet": {
      "Type": "AWS::EC2::Subnet::Id",
      "Description": "Subnet-ID the existing subnet in your VPC where you want to deploy Primary node(s).",
      "AllowedPattern": "subnet-[0-9a-z]{8}"
    }
  },
  "Conditions": {
    "UsePIops": {
      "Fn::Equals": [
        {
          "Ref": "VolumeType"
        },
        "io1"
      ]
    },
    "UseGP2": {
      "Fn::Equals": [
        {
          "Ref": "VolumeType"
        },
        "gp2"
      ]
    },
    "CreateSingleReplicaSet": {
      "Fn::Equals": [
        {
          "Ref": "ClusterReplicaSetCount"
        },
        "1"
      ]
    },
    "CreateThreeReplicaSet": {
      "Fn::Equals": [
        {
          "Ref": "ClusterReplicaSetCount"
        },
        "3"
      ]
    },
    "CreateNoShard": {
      "Fn::Equals": [
        {
          "Ref": "ClusterShardCount"
        },
        "0"
      ]
    },
    "CreateConfigServers": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "ClusterShardCount"
            },
            "0"
          ]
        }
      ]
    },
    "CreateMinOneShard": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "ClusterShardCount"
            },
            "0"
          ]
        }
      ]
    },
    "CreateMinTwoShards": {
      "Fn::Or": [
        {
          "Fn::Equals": [
            "2",
            {
              "Ref": "ClusterShardCount"
            }
          ]
        },
        {
          "Fn::Equals": [
            "3",
            {
              "Ref": "ClusterShardCount"
            }
          ]
        }
      ]
    },
    "CreateMinThreeShards": {
      "Fn::Or": [
        {
          "Fn::Equals": [
            "3",
            {
              "Ref": "ClusterShardCount"
            }
          ]
        },
        {
          "Fn::Equals": [
            "3",
            {
              "Ref": "ClusterShardCount"
            }
          ]
        }
      ]
    },
    "UsePIopsAndCreateNoShard": {
      "Fn::And": [
        {
          "Condition": "UsePIops"
        },
        {
          "Condition": "CreateNoShard"
        }
      ]
    },
    "UsePIopsAndCreateMinOneShard": {
      "Fn::And": [
        {
          "Condition": "UsePIops"
        },
        {
          "Condition": "CreateMinOneShard"
        }
      ]
    },
    "UsePIopsAndCreateMinTwoShards": {
      "Fn::And": [
        {
          "Condition": "UsePIops"
        },
        {
          "Condition": "CreateMinTwoShards"
        }
      ]
    },
    "UsePIopsAndCreateMinThreeShards": {
      "Fn::And": [
        {
          "Condition": "UsePIops"
        },
        {
          "Condition": "CreateMinThreeShards"
        }
      ]
    },
    "UseGP2AndCreateMinThreeShards": {
      "Fn::And": [
        {
          "Condition": "UseGP2"
        },
        {
          "Condition": "CreateMinThreeShards"
        }
      ]
    },
    "UsePIopsAndIfSecondaryReplicaNode0": {
      "Fn::And": [
        {
          "Condition": "UsePIops"
        },
        {
          "Condition": "IfSecondaryReplicaNode0"
        }
      ]
    },
    "UsePIopsAndIfSecondaryReplicaNode1": {
      "Fn::And": [
        {
          "Condition": "UsePIops"
        },
        {
          "Condition": "IfSecondaryReplicaNode1"
        }
      ]
    },
    "UsePIopsAndIfSecondaryReplicaNode00": {
      "Fn::And": [
        {
          "Condition": "UsePIops"
        },
        {
          "Condition": "IfSecondaryReplicaNode00"
        }
      ]
    },
    "UsePIopsAndIfSecondaryReplicaNode10": {
      "Fn::And": [
        {
          "Condition": "UsePIops"
        },
        {
          "Condition": "IfSecondaryReplicaNode10"
        }
      ]
    },
    "UsePIopsAndIfSecondaryReplicaNode11": {
      "Fn::And": [
        {
          "Condition": "UsePIops"
        },
        {
          "Condition": "IfSecondaryReplicaNode11"
        }
      ]
    },
    "UsePIopsAndIfSecondaryReplicaNode01": {
      "Fn::And": [
        {
          "Condition": "UsePIops"
        },
        {
          "Condition": "IfSecondaryReplicaNode01"
        }
      ]
    },
    "UsePIopsAndIfSecondaryReplicaNode21": {
      "Fn::And": [
        {
          "Condition": "UsePIops"
        },
        {
          "Condition": "IfSecondaryReplicaNode21"
        }
      ]
    },
    "UsePIopsAndIfSecondaryReplicaNode20": {
      "Fn::And": [
        {
          "Condition": "UsePIops"
        },
        {
          "Condition": "IfSecondaryReplicaNode20"
        }
      ]
    },
    "UseGP2AndIfSecondaryReplicaNode10": {
      "Fn::And": [
        {
          "Condition": "UseGP2"
        },
        {
          "Condition": "IfSecondaryReplicaNode10"
        }
      ]
    },
    "UseGP2AndIfSecondaryReplicaNode11": {
      "Fn::And": [
        {
          "Condition": "UseGP2"
        },
        {
          "Condition": "IfSecondaryReplicaNode11"
        }
      ]
    },
    "UseGP2AndIfSecondaryReplicaNode20": {
      "Fn::And": [
        {
          "Condition": "UseGP2"
        },
        {
          "Condition": "IfSecondaryReplicaNode20"
        }
      ]
    },
    "UseGP2AndIfSecondaryReplicaNode21": {
      "Fn::And": [
        {
          "Condition": "UseGP2"
        },
        {
          "Condition": "IfSecondaryReplicaNode21"
        }
      ]
    },
    "UseGP2AndCreateNoShard": {
      "Fn::And": [
        {
          "Condition": "UseGP2"
        },
        {
          "Condition": "CreateNoShard"
        }
      ]
    },
    "UseGP2AndCreateMinOneShard": {
      "Fn::And": [
        {
          "Condition": "UseGP2"
        },
        {
          "Condition": "CreateMinOneShard"
        }
      ]
    },
    "UseGP2AndIfSecondaryReplicaNode0": {
      "Fn::And": [
        {
          "Condition": "UseGP2"
        },
        {
          "Condition": "IfSecondaryReplicaNode0"
        }
      ]
    },
    "UseGP2AndIfSecondaryReplicaNode1": {
      "Fn::And": [
        {
          "Condition": "UseGP2"
        },
        {
          "Condition": "IfSecondaryReplicaNode1"
        }
      ]
    },
    "UseGP2AndIfSecondaryReplicaNode00": {
      "Fn::And": [
        {
          "Condition": "UseGP2"
        },
        {
          "Condition": "IfSecondaryReplicaNode00"
        }
      ]
    },
    "UseGP2AndIfSecondaryReplicaNode01": {
      "Fn::And": [
        {
          "Condition": "UseGP2"
        },
        {
          "Condition": "IfSecondaryReplicaNode01"
        }
      ]
    },
    "UseGP2AndCreateMinTwoShards": {
      "Fn::And": [
        {
          "Condition": "UseGP2"
        },
        {
          "Condition": "CreateMinTwoShards"
        }
      ]
    },
    "IfSecondaryReplicaNode00": {
      "Fn::And": [
        {
          "Condition": "CreateMinOneShard"
        },
        {
          "Condition": "CreateThreeReplicaSet"
        }
      ]
    },
    "IfSecondaryReplicaNode0": {
      "Fn::And": [
        {
          "Condition": "CreateNoShard"
        },
        {
          "Condition": "CreateThreeReplicaSet"
        }
      ]
    },
    "IfSecondaryReplicaNode1": {
      "Fn::And": [
        {
          "Condition": "CreateNoShard"
        },
        {
          "Condition": "CreateThreeReplicaSet"
        }
      ]
    },
    "IfSecondaryReplicaNode01": {
      "Fn::And": [
        {
          "Condition": "CreateMinOneShard"
        },
        {
          "Condition": "CreateThreeReplicaSet"
        }
      ]
    },
    "IfSecondaryReplicaNode10": {
      "Fn::And": [
        {
          "Condition": "CreateMinTwoShards"
        },
        {
          "Condition": "CreateThreeReplicaSet"
        }
      ]
    },
    "IfSecondaryReplicaNode11": {
      "Fn::And": [
        {
          "Condition": "CreateMinTwoShards"
        },
        {
          "Condition": "CreateThreeReplicaSet"
        }
      ]
    },
    "IfSecondaryReplicaNode20": {
      "Fn::And": [
        {
          "Condition": "CreateMinThreeShards"
        },
        {
          "Condition": "CreateThreeReplicaSet"
        }
      ]
    },
    "IfSecondaryReplicaNode21": {
      "Fn::And": [
        {
          "Condition": "CreateMinThreeShards"
        },
        {
          "Condition": "CreateThreeReplicaSet"
        }
      ]
    }
  },
  "Mappings": {
    "RegionAZ" : {
      "us-east-1" : { "AZ" : ["us-east-1c", "us-east-1d", "us-east-1e"]}
    },
    "InstanceTypeArchFromNode": {
      "m3.medium": {
        "Arch": "64HVM"
      },
      "m3.large": {
        "Arch": "64HVM"
      },
      "m3.xlarge": {
        "Arch": "64HVM"
      },
      "m3.2xlarge": {
        "Arch": "64HVM"
      },
      "m4.large": {
        "Arch": "64HVM"
      },
      "m4.xlarge": {
        "Arch": "64HVM"
      },
      "m4.2xlarge": {
        "Arch": "64HVM"
      },
      "c3.large": {
        "Arch": "64HVM"
      },
      "c3.xlarge": {
        "Arch": "64HVM"
      },
      "c3.2xlarge": {
        "Arch": "64HVM"
      },
      "c3.4xlarge": {
        "Arch": "64HVM"
      },
      "c3.8xlarge": {
        "Arch": "64HVM"
      },
      "r3.large": {
        "Arch": "64HVM"
      },
      "r3.xlarge": {
        "Arch": "64HVM"
      },
      "r3.2xlarge": {
        "Arch": "64HVM"
      },
      "r3.4xlarge": {
        "Arch": "64HVM"
      },
      "r3.8xlarge": {
        "Arch": "64HVM"
      },
      "i2.xlarge": {
        "Arch": "64HVM"
      },
      "i2.2xlarge": {
        "Arch": "64HVM"
      },
      "i2.4xlarge": {
        "Arch": "64HVM"
      },
      "i2.8xlarge": {
        "Arch": "64HVM"
      }
    },
    "RegionImageZone": {
      "us-east-1": {
        "64HVM": "ami-c6c6f6ac"
      }
    },
    "AWSNATAMI": {
      "us-east-1": {
        "AMI": "ami-c6c6f6ac"
      }
    },
    "InstanceTypeArch": {
      "t2.micro": {
        "Arch": "64HVM"
      },
      "m3.medium": {
        "Arch": "64HVM"
      },
      "m3.large": {
        "Arch": "64HVM"
      },
      "m3.xlarge": {
        "Arch": "64HVM"
      },
      "m3.2xlarge": {
        "Arch": "64HVM"
      },
      "c3.large": {
        "Arch": "64HVM"
      },
      "c3.xlarge": {
        "Arch": "64HVM"
      },
      "c3.2xlarge": {
        "Arch": "64HVM"
      },
      "c3.4xlarge": {
        "Arch": "64HVM"
      },
      "c3.8xlarge": {
        "Arch": "64HVM"
      },
      "r3.large": {
        "Arch": "64HVM"
      },
      "r3.xlarge": {
        "Arch": "64HVM"
      },
      "r3.2xlarge": {
        "Arch": "64HVM"
      },
      "r3.4xlarge": {
        "Arch": "64HVM"
      },
      "r3.8xlarge": {
        "Arch": "64HVM"
      },
      "i2.xlarge": {
        "Arch": "64HVM"
      },
      "i2.2xlarge": {
        "Arch": "64HVM"
      },
      "i2.4xlarge": {
        "Arch": "64HVM"
      },
      "i2.8xlarge": {
        "Arch": "64HVM"
      }
    },
    "AMI": {
      "us-east-1": {
        "64HVM": "ami-c6c6f6ac"
      }
    }
  },
  "Resources": {
    "PrimaryReplicaNode0WaitForNodeInstallIO1": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "Condition": "UsePIopsAndCreateNoShard",
      "Properties": {
        "Handle": {
          "Ref": "PrimaryReplicaNode0WaitForNodeInstallWaitHandle"
        },
        "Timeout": "3600"
      }
    },
    "PrimaryReplicaNode0WaitForNodeInstallGP2": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "Condition": "UseGP2AndCreateNoShard",
      "Properties": {
        "Handle": {
          "Ref": "PrimaryReplicaNode0WaitForNodeInstallWaitHandle"
        },
        "Timeout": "3600"
      }
    },
    "PrimaryReplicaNode0WaitForNodeInstallWaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle",
      "Properties": {},
      "Condition": "CreateNoShard"
    },
    "PrimaryReplicaNode0NodeInstanceGP2": {
      "Type": "AWS::EC2::Instance",
      "Condition": "UseGP2AndCreateNoShard",
      "Metadata": {
        "HostRole": "MongoDB Node"
      },
      "Properties": {
        "KeyName": {
          "Ref": "KeyName"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "InstanceTypeArch",
                {
                  "Ref": "NodeInstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "IamInstanceProfile": "storytools-full",
        "Tags": [
          {
            "Key": "Name",
            "Value": "PrimaryReplicaNode0"
          },
          {
            "Key": "ClusterReplicaSetCount",
            "Value": {
              "Ref": "ClusterReplicaSetCount"
            }
          },
          {
            "Key": "NodeReplicaSetIndex",
            "Value": "0"
          },
          {
            "Key": "ClusterShardCount",
            "Value": {
              "Ref": "ClusterShardCount"
            }
          },
          {
            "Key": "ShardsPerNode",
            "Value": {
              "Ref": "ShardsPerNode"
            }
          },
          {
            "Key": "NodeShardIndex",
            "Value": "-1"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvdg",
            "Ebs": {
              "VolumeType": "io1",
              "DeleteOnTermination": "true",
              "VolumeSize": "25",
              "Iops": "250"
            }
          },
          {
            "DeviceName": "/dev/xvdh",
            "Ebs": {
              "VolumeType": "io1",
              "DeleteOnTermination": "true",
              "VolumeSize": "25",
              "Iops": "200"
            }
          },
          {
            "DeviceName": "/dev/xvdf",
            "Ebs": {
              "VolumeSize": {
                "Ref": "VolumeSize"
              },
              "VolumeType": "gp2",
              "DeleteOnTermination": "true"
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -v\n",
                "mkdir -p /home/ec2-user/mongodb \n",
                "cd /home/ec2-user/mongodb \n",
                "# Wait until the NAT initializes and Internet is available \n",
                "until ping -c 1 ietf.org \n",
                "do \n",
                "sleep 5; \n",
                "done \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/orchestrator.sh orchestrator.sh\n",
                "chmod +x orchestrator.sh \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/init.sh init.sh\n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n",
                "chmod +x signalFinalStatus.sh \n",
                "chmod +x init.sh \n",
                "#  Run the install \n",
                "#  Store stack name to tag DDB name\n",
                "echo ",
                {
                  "Fn::Join": [
                    "_",
                    [
                      "export TABLE_NAMETAG=",
                      {
                        "Ref": "AWS::StackName"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "export MongoDBVersion=",
                      {
                        "Ref": "MongoDBVersion"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "export VPC=",
                      {
                        "Ref": "VPC"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "#  Store WaitHandler\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "\"",
                      "export WAITHANDLER='",
                      {
                        "Ref": "PrimaryReplicaNode0WaitForNodeInstallWaitHandle"
                      },
                      "'",
                      "\""
                    ]
                  ]
                },
                " >> config.sh\n",
                "./init.sh > install.log 2>&1 \n",
                "#  Cleanup \n",
                "#rm -rf *\n",
                "chown -R ec2-user:ec2-user /home/ec2-user/ \n",
                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
              ]
            ]
          }
        },
        "InstanceType": {
          "Ref": "NodeInstanceType"
        }
      }
    },
    "PrimaryReplicaNode0NodeInstanceIO1": {
      "Type": "AWS::EC2::Instance",
      "Condition": "UsePIopsAndCreateNoShard",
      "Metadata": {
        "HostRole": "MongoDB Node"
      },
      "Properties": {
        "KeyName": {
          "Ref": "KeyName"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "InstanceTypeArch",
                {
                  "Ref": "NodeInstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "IamInstanceProfile": "storytools-full",
        "Tags": [
          {
            "Key": "Name",
            "Value": "PrimaryReplicaNode0"
          },
          {
            "Key": "ClusterReplicaSetCount",
            "Value": {
              "Ref": "ClusterReplicaSetCount"
            }
          },
          {
            "Key": "NodeReplicaSetIndex",
            "Value": "0"
          },
          {
            "Key": "ClusterShardCount",
            "Value": {
              "Ref": "ClusterShardCount"
            }
          },
          {
            "Key": "ShardsPerNode",
            "Value": {
              "Ref": "ShardsPerNode"
            }
          },
          {
            "Key": "NodeShardIndex",
            "Value": "-1"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvdg",
            "Ebs": {
              "VolumeType": "io1",
              "DeleteOnTermination": "true",
              "VolumeSize": "25",
              "Iops": "250"
            }
          },
          {
            "DeviceName": "/dev/xvdh",
            "Ebs": {
              "VolumeType": "io1",
              "DeleteOnTermination": "true",
              "VolumeSize": "25",
              "Iops": "200"
            }
          },
          {
            "DeviceName": "/dev/xvdf",
            "Ebs": {
              "VolumeSize": {
                "Ref": "VolumeSize"
              },
              "VolumeType": "io1",
              "Iops": {
                "Ref": "Iops"
              },
              "DeleteOnTermination": "true"
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -v\n",
                "mkdir -p /home/ec2-user/mongodb \n",
                "cd /home/ec2-user/mongodb \n",
                "# Wait until the NAT initializes and Internet is available \n",
                "until ping -c 1 ietf.org \n",
                "do \n",
                "sleep 5; \n",
                "done \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/orchestrator.sh orchestrator.sh\n",
                "chmod +x orchestrator.sh \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/init.sh init.sh\n",
                "chmod +x init.sh \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n",
                "chmod +x signalFinalStatus.sh \n",
                "#  Run the install \n",
                "#  Store stack name to tag DDB name\n",
                "echo ",
                {
                  "Fn::Join": [
                    "_",
                    [
                      "export TABLE_NAMETAG=",
                      {
                        "Ref": "AWS::StackName"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "export VPC=",
                      {
                        "Ref": "VPC"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "export MongoDBVersion=",
                      {
                        "Ref": "MongoDBVersion"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "#  Store WaitHandler\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "\"",
                      "export WAITHANDLER='",
                      {
                        "Ref": "PrimaryReplicaNode0WaitForNodeInstallWaitHandle"
                      },
                      "'",
                      "\""
                    ]
                  ]
                },
                " >> config.sh\n",
                "./init.sh > install.log 2>&1 \n",
                "#  Cleanup \n",
                "#rm -rf *\n",
                "chown -R ec2-user:ec2-user /home/ec2-user/ \n",
                "# All is well so signal success\n",
                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
              ]
            ]
          }
        },
        "InstanceType": {
          "Ref": "NodeInstanceType"
        }
      }
    },
    "PrimaryReplicaNode00WaitForNodeInstallIO1": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": "PrimaryReplicaNode00NodeInstanceIO1",
      "Condition": "UsePIopsAndCreateMinOneShard",
      "Properties": {
        "Handle": {
          "Ref": "PrimaryReplicaNode00WaitForNodeInstallWaitHandle"
        },
        "Timeout": "3600"
      }
    },
    "PrimaryReplicaNode00WaitForNodeInstallGP2": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": "PrimaryReplicaNode00NodeInstanceGP2",
      "Condition": "UseGP2AndCreateMinOneShard",
      "Properties": {
        "Handle": {
          "Ref": "PrimaryReplicaNode00WaitForNodeInstallWaitHandle"
        },
        "Timeout": "3600"
      }
    },
    "PrimaryReplicaNode00WaitForNodeInstallWaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle",
      "Properties": {},
      "Condition": "CreateMinOneShard"
    },
    "PrimaryReplicaNode00NodeInstanceGP2": {
      "Type": "AWS::EC2::Instance",
      "Condition": "UseGP2AndCreateMinOneShard",
      "Metadata": {
        "HostRole": "MongoDB Node"
      },
      "Properties": {
        "KeyName": {
          "Ref": "KeyName"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "InstanceTypeArch",
                {
                  "Ref": "NodeInstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "IamInstanceProfile": "storytools-full",
        "Tags": [
          {
            "Key": "Name",
            "Value": "PrimaryReplicaNode00"
          },
          {
            "Key": "ClusterReplicaSetCount",
            "Value": {
              "Ref": "ClusterReplicaSetCount"
            }
          },
          {
            "Key": "NodeReplicaSetIndex",
            "Value": "0"
          },
          {
            "Key": "ClusterShardCount",
            "Value": {
              "Ref": "ClusterShardCount"
            }
          },
          {
            "Key": "ShardsPerNode",
            "Value": {
              "Ref": "ShardsPerNode"
            }
          },
          {
            "Key": "NodeShardIndex",
            "Value": "0"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvdg",
            "Ebs": {
              "VolumeType": "io1",
              "DeleteOnTermination": "true",
              "VolumeSize": "25",
              "Iops": "250"
            }
          },
          {
            "DeviceName": "/dev/xvdh",
            "Ebs": {
              "VolumeType": "io1",
              "DeleteOnTermination": "true",
              "VolumeSize": "25",
              "Iops": "200"
            }
          },
          {
            "DeviceName": "/dev/xvdf",
            "Ebs": {
              "VolumeSize": {
                "Ref": "VolumeSize"
              },
              "VolumeType": "gp2",
              "DeleteOnTermination": "true"
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -v\n",
                "mkdir -p /home/ec2-user/mongodb \n",
                "cd /home/ec2-user/mongodb \n",
                "# Wait until the NAT initializes and Internet is available \n",
                "until ping -c 1 ietf.org \n",
                "do \n",
                "sleep 5; \n",
                "done \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/orchestrator.sh orchestrator.sh\n",
                "chmod +x orchestrator.sh \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/init.sh init.sh\n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n",
                "chmod +x signalFinalStatus.sh \n",
                "chmod +x init.sh \n",
                "#  Run the install \n",
                "#  Store stack name to tag DDB name\n",
                "echo ",
                {
                  "Fn::Join": [
                    "_",
                    [
                      "export TABLE_NAMETAG=",
                      {
                        "Ref": "AWS::StackName"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "export MongoDBVersion=",
                      {
                        "Ref": "MongoDBVersion"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "export VPC=",
                      {
                        "Ref": "VPC"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "#  Store WaitHandler\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "\"",
                      "export WAITHANDLER='",
                      {
                        "Ref": "PrimaryReplicaNode00WaitForNodeInstallWaitHandle"
                      },
                      "'",
                      "\""
                    ]
                  ]
                },
                " >> config.sh\n",
                "./init.sh > install.log 2>&1 \n",
                "#  Cleanup \n",
                "#rm -rf *\n",
                "chown -R ec2-user:ec2-user /home/ec2-user/ \n",
                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
              ]
            ]
          }
        },
        "InstanceType": {
          "Ref": "NodeInstanceType"
        }
      }
    },
    "PrimaryReplicaNode00NodeInstanceIO1": {
      "Type": "AWS::EC2::Instance",
      "Condition": "UsePIopsAndCreateMinOneShard",
      "Metadata": {
        "HostRole": "MongoDB Node"
      },
      "Properties": {
        "KeyName": {
          "Ref": "KeyName"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "InstanceTypeArch",
                {
                  "Ref": "NodeInstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "IamInstanceProfile": "storytools-full",
        "Tags": [
          {
            "Key": "Name",
            "Value": "PrimaryReplicaNode00"
          },
          {
            "Key": "ClusterReplicaSetCount",
            "Value": {
              "Ref": "ClusterReplicaSetCount"
            }
          },
          {
            "Key": "NodeReplicaSetIndex",
            "Value": "0"
          },
          {
            "Key": "ClusterShardCount",
            "Value": {
              "Ref": "ClusterShardCount"
            }
          },
          {
            "Key": "ShardsPerNode",
            "Value": {
              "Ref": "ShardsPerNode"
            }
          },
          {
            "Key": "NodeShardIndex",
            "Value": "0"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvdg",
            "Ebs": {
              "VolumeType": "io1",
              "DeleteOnTermination": "true",
              "VolumeSize": "25",
              "Iops": "250"
            }
          },
          {
            "DeviceName": "/dev/xvdh",
            "Ebs": {
              "VolumeType": "io1",
              "DeleteOnTermination": "true",
              "VolumeSize": "25",
              "Iops": "200"
            }
          },
          {
            "DeviceName": "/dev/xvdf",
            "Ebs": {
              "VolumeSize": {
                "Ref": "VolumeSize"
              },
              "VolumeType": "io1",
              "Iops": {
                "Ref": "Iops"
              },
              "DeleteOnTermination": "true"
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -v\n",
                "mkdir -p /home/ec2-user/mongodb \n",
                "cd /home/ec2-user/mongodb \n",
                "# Wait until the NAT initializes and Internet is available \n",
                "until ping -c 1 ietf.org \n",
                "do \n",
                "sleep 5; \n",
                "done \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/orchestrator.sh orchestrator.sh\n",
                "chmod +x orchestrator.sh \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/init.sh init.sh\n",
                "chmod +x init.sh \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n",
                "chmod +x signalFinalStatus.sh \n",
                "#  Run the install \n",
                "#  Store stack name to tag DDB name\n",
                "echo ",
                {
                  "Fn::Join": [
                    "_",
                    [
                      "export TABLE_NAMETAG=",
                      {
                        "Ref": "AWS::StackName"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "export VPC=",
                      {
                        "Ref": "VPC"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "export MongoDBVersion=",
                      {
                        "Ref": "MongoDBVersion"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "#  Store WaitHandler\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "\"",
                      "export WAITHANDLER='",
                      {
                        "Ref": "PrimaryReplicaNode00WaitForNodeInstallWaitHandle"
                      },
                      "'",
                      "\""
                    ]
                  ]
                },
                " >> config.sh\n",
                "./init.sh > install.log 2>&1 \n",
                "#  Cleanup \n",
                "#rm -rf *\n",
                "chown -R ec2-user:ec2-user /home/ec2-user/ \n",
                "# All is well so signal success\n",
                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
              ]
            ]
          }
        },
        "InstanceType": {
          "Ref": "NodeInstanceType"
        }
      }
    },
    "SecondaryReplicaNode0WaitForNodeInstallIO1": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": "SecondaryReplicaNode0NodeInstanceIO1",
      "Condition": "UsePIopsAndIfSecondaryReplicaNode0",
      "Properties": {
        "Handle": {
          "Ref": "SecondaryReplicaNode0WaitForNodeInstallWaitHandle"
        },
        "Timeout": "3600"
      }
    },
    "SecondaryReplicaNode0WaitForNodeInstallGP2": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": "SecondaryReplicaNode0NodeInstanceGP2",
      "Condition": "UseGP2AndIfSecondaryReplicaNode0",
      "Properties": {
        "Handle": {
          "Ref": "SecondaryReplicaNode0WaitForNodeInstallWaitHandle"
        },
        "Timeout": "3600"
      }
    },
    "SecondaryReplicaNode0WaitForNodeInstallWaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle",
      "Properties": {},
      "Condition": "IfSecondaryReplicaNode0"
    },
    "SecondaryReplicaNode0NodeInstanceGP2": {
      "Type": "AWS::EC2::Instance",
      "Condition": "UseGP2AndIfSecondaryReplicaNode0",
      "Metadata": {
        "HostRole": "MongoDB Node"
      },
      "Properties": {
        "KeyName": {
          "Ref": "KeyName"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "InstanceTypeArch",
                {
                  "Ref": "NodeInstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "IamInstanceProfile": "storytools-full",
        "Tags": [
          {
            "Key": "Name",
            "Value": "SecondaryReplicaNode0"
          },
          {
            "Key": "ClusterReplicaSetCount",
            "Value": {
              "Ref": "ClusterReplicaSetCount"
            }
          },
          {
            "Key": "NodeReplicaSetIndex",
            "Value": "1"
          },
          {
            "Key": "ClusterShardCount",
            "Value": {
              "Ref": "ClusterShardCount"
            }
          },
          {
            "Key": "ShardsPerNode",
            "Value": {
              "Ref": "ShardsPerNode"
            }
          },
          {
            "Key": "NodeShardIndex",
            "Value": "-1"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvdg",
            "Ebs": {
              "VolumeType": "io1",
              "DeleteOnTermination": "true",
              "VolumeSize": "25",
              "Iops": "250"
            }
          },
          {
            "DeviceName": "/dev/xvdh",
            "Ebs": {
              "VolumeType": "io1",
              "DeleteOnTermination": "true",
              "VolumeSize": "25",
              "Iops": "200"
            }
          },
          {
            "DeviceName": "/dev/xvdf",
            "Ebs": {
              "VolumeSize": {
                "Ref": "VolumeSize"
              },
              "VolumeType": "gp2",
              "DeleteOnTermination": "true"
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -v\n",
                "mkdir -p /home/ec2-user/mongodb \n",
                "cd /home/ec2-user/mongodb \n",
                "# Wait until the NAT initializes and Internet is available \n",
                "until ping -c 1 ietf.org \n",
                "do \n",
                "sleep 5; \n",
                "done \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/orchestrator.sh orchestrator.sh\n",
                "chmod +x orchestrator.sh \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/init.sh init.sh\n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n",
                "chmod +x signalFinalStatus.sh \n",
                "chmod +x init.sh \n",
                "#  Run the install \n",
                "#  Store stack name to tag DDB name\n",
                "echo ",
                {
                  "Fn::Join": [
                    "_",
                    [
                      "export TABLE_NAMETAG=",
                      {
                        "Ref": "AWS::StackName"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "export MongoDBVersion=",
                      {
                        "Ref": "MongoDBVersion"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "export VPC=",
                      {
                        "Ref": "VPC"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "#  Store WaitHandler\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "\"",
                      "export WAITHANDLER='",
                      {
                        "Ref": "SecondaryReplicaNode0WaitForNodeInstallWaitHandle"
                      },
                      "'",
                      "\""
                    ]
                  ]
                },
                " >> config.sh\n",
                "./init.sh > install.log 2>&1 \n",
                "#  Cleanup \n",
                "#rm -rf *\n",
                "chown -R ec2-user:ec2-user /home/ec2-user/ \n",
                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
              ]
            ]
          }
        },
        "InstanceType": {
          "Ref": "NodeInstanceType"
        }
      }
    },
    "SecondaryReplicaNode0NodeInstanceIO1": {
      "Type": "AWS::EC2::Instance",
      "Condition": "UsePIopsAndIfSecondaryReplicaNode0",
      "Metadata": {
        "HostRole": "MongoDB Node"
      },
      "Properties": {
        "KeyName": {
          "Ref": "KeyName"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "InstanceTypeArch",
                {
                  "Ref": "NodeInstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "IamInstanceProfile": "storytools-full",
        "Tags": [
          {
            "Key": "Name",
            "Value": "SecondaryReplicaNode0"
          },
          {
            "Key": "ClusterReplicaSetCount",
            "Value": {
              "Ref": "ClusterReplicaSetCount"
            }
          },
          {
            "Key": "NodeReplicaSetIndex",
            "Value": "1"
          },
          {
            "Key": "ClusterShardCount",
            "Value": {
              "Ref": "ClusterShardCount"
            }
          },
          {
            "Key": "ShardsPerNode",
            "Value": {
              "Ref": "ShardsPerNode"
            }
          },
          {
            "Key": "NodeShardIndex",
            "Value": "-1"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvdg",
            "Ebs": {
              "VolumeType": "io1",
              "DeleteOnTermination": "true",
              "VolumeSize": "25",
              "Iops": "250"
            }
          },
          {
            "DeviceName": "/dev/xvdh",
            "Ebs": {
              "VolumeType": "io1",
              "DeleteOnTermination": "true",
              "VolumeSize": "25",
              "Iops": "200"
            }
          },
          {
            "DeviceName": "/dev/xvdf",
            "Ebs": {
              "VolumeSize": {
                "Ref": "VolumeSize"
              },
              "VolumeType": "io1",
              "Iops": {
                "Ref": "Iops"
              },
              "DeleteOnTermination": "true"
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -v\n",
                "mkdir -p /home/ec2-user/mongodb \n",
                "cd /home/ec2-user/mongodb \n",
                "# Wait until the NAT initializes and Internet is available \n",
                "until ping -c 1 ietf.org \n",
                "do \n",
                "sleep 5; \n",
                "done \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/orchestrator.sh orchestrator.sh\n",
                "chmod +x orchestrator.sh \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/init.sh init.sh\n",
                "chmod +x init.sh \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n",
                "chmod +x signalFinalStatus.sh \n",
                "#  Run the install \n",
                "#  Store stack name to tag DDB name\n",
                "echo ",
                {
                  "Fn::Join": [
                    "_",
                    [
                      "export TABLE_NAMETAG=",
                      {
                        "Ref": "AWS::StackName"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "export VPC=",
                      {
                        "Ref": "VPC"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "export MongoDBVersion=",
                      {
                        "Ref": "MongoDBVersion"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "#  Store WaitHandler\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "\"",
                      "export WAITHANDLER='",
                      {
                        "Ref": "SecondaryReplicaNode0WaitForNodeInstallWaitHandle"
                      },
                      "'",
                      "\""
                    ]
                  ]
                },
                " >> config.sh\n",
                "./init.sh > install.log 2>&1 \n",
                "#  Cleanup \n",
                "#rm -rf *\n",
                "chown -R ec2-user:ec2-user /home/ec2-user/ \n",
                "# All is well so signal success\n",
                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
              ]
            ]
          }
        },
        "InstanceType": {
          "Ref": "NodeInstanceType"
        }
      }
    },
    "SecondaryReplicaNode00WaitForNodeInstallIO1": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": "SecondaryReplicaNode00NodeInstanceIO1",
      "Condition": "UsePIopsAndIfSecondaryReplicaNode00",
      "Properties": {
        "Handle": {
          "Ref": "SecondaryReplicaNode00WaitForNodeInstallWaitHandle"
        },
        "Timeout": "3600"
      }
    },
    "SecondaryReplicaNode00WaitForNodeInstallGP2": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": "SecondaryReplicaNode00NodeInstanceGP2",
      "Condition": "UseGP2AndIfSecondaryReplicaNode00",
      "Properties": {
        "Handle": {
          "Ref": "SecondaryReplicaNode00WaitForNodeInstallWaitHandle"
        },
        "Timeout": "3600"
      }
    },
    "SecondaryReplicaNode00WaitForNodeInstallWaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle",
      "Properties": {},
      "Condition": "IfSecondaryReplicaNode00"
    },
    "SecondaryReplicaNode00NodeInstanceGP2": {
      "Type": "AWS::EC2::Instance",
      "Condition": "UseGP2AndIfSecondaryReplicaNode00",
      "Metadata": {
        "HostRole": "MongoDB Node"
      },
      "Properties": {
        "KeyName": {
          "Ref": "KeyName"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "InstanceTypeArch",
                {
                  "Ref": "NodeInstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "IamInstanceProfile": "storytools-full",
        "Tags": [
          {
            "Key": "Name",
            "Value": "SecondaryReplicaNode00"
          },
          {
            "Key": "ClusterReplicaSetCount",
            "Value": {
              "Ref": "ClusterReplicaSetCount"
            }
          },
          {
            "Key": "NodeReplicaSetIndex",
            "Value": "1"
          },
          {
            "Key": "ClusterShardCount",
            "Value": {
              "Ref": "ClusterShardCount"
            }
          },
          {
            "Key": "ShardsPerNode",
            "Value": {
              "Ref": "ShardsPerNode"
            }
          },
          {
            "Key": "NodeShardIndex",
            "Value": "0"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvdg",
            "Ebs": {
              "VolumeType": "io1",
              "DeleteOnTermination": "true",
              "VolumeSize": "25",
              "Iops": "250"
            }
          },
          {
            "DeviceName": "/dev/xvdh",
            "Ebs": {
              "VolumeType": "io1",
              "DeleteOnTermination": "true",
              "VolumeSize": "25",
              "Iops": "200"
            }
          },
          {
            "DeviceName": "/dev/xvdf",
            "Ebs": {
              "VolumeSize": {
                "Ref": "VolumeSize"
              },
              "VolumeType": "gp2",
              "DeleteOnTermination": "true"
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -v\n",
                "mkdir -p /home/ec2-user/mongodb \n",
                "cd /home/ec2-user/mongodb \n",
                "# Wait until the NAT initializes and Internet is available \n",
                "until ping -c 1 ietf.org \n",
                "do \n",
                "sleep 5; \n",
                "done \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/orchestrator.sh orchestrator.sh\n",
                "chmod +x orchestrator.sh \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/init.sh init.sh\n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n",
                "chmod +x signalFinalStatus.sh \n",
                "chmod +x init.sh \n",
                "#  Run the install \n",
                "#  Store stack name to tag DDB name\n",
                "echo ",
                {
                  "Fn::Join": [
                    "_",
                    [
                      "export TABLE_NAMETAG=",
                      {
                        "Ref": "AWS::StackName"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "export MongoDBVersion=",
                      {
                        "Ref": "MongoDBVersion"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "export VPC=",
                      {
                        "Ref": "VPC"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "#  Store WaitHandler\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "\"",
                      "export WAITHANDLER='",
                      {
                        "Ref": "SecondaryReplicaNode00WaitForNodeInstallWaitHandle"
                      },
                      "'",
                      "\""
                    ]
                  ]
                },
                " >> config.sh\n",
                "./init.sh > install.log 2>&1 \n",
                "#  Cleanup \n",
                "#rm -rf *\n",
                "chown -R ec2-user:ec2-user /home/ec2-user/ \n",
                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
              ]
            ]
          }
        },
        "InstanceType": {
          "Ref": "NodeInstanceType"
        }
      }
    },
    "SecondaryReplicaNode00NodeInstanceIO1": {
      "Type": "AWS::EC2::Instance",
      "Condition": "UsePIopsAndIfSecondaryReplicaNode00",
      "Metadata": {
        "HostRole": "MongoDB Node"
      },
      "Properties": {
        "KeyName": {
          "Ref": "KeyName"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "InstanceTypeArch",
                {
                  "Ref": "NodeInstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "IamInstanceProfile": "storytools-full",
        "Tags": [
          {
            "Key": "Name",
            "Value": "SecondaryReplicaNode00"
          },
          {
            "Key": "ClusterReplicaSetCount",
            "Value": {
              "Ref": "ClusterReplicaSetCount"
            }
          },
          {
            "Key": "NodeReplicaSetIndex",
            "Value": "1"
          },
          {
            "Key": "ClusterShardCount",
            "Value": {
              "Ref": "ClusterShardCount"
            }
          },
          {
            "Key": "ShardsPerNode",
            "Value": {
              "Ref": "ShardsPerNode"
            }
          },
          {
            "Key": "NodeShardIndex",
            "Value": "0"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvdg",
            "Ebs": {
              "VolumeType": "io1",
              "DeleteOnTermination": "true",
              "VolumeSize": "25",
              "Iops": "250"
            }
          },
          {
            "DeviceName": "/dev/xvdh",
            "Ebs": {
              "VolumeType": "io1",
              "DeleteOnTermination": "true",
              "VolumeSize": "25",
              "Iops": "200"
            }
          },
          {
            "DeviceName": "/dev/xvdf",
            "Ebs": {
              "VolumeSize": {
                "Ref": "VolumeSize"
              },
              "VolumeType": "io1",
              "Iops": {
                "Ref": "Iops"
              },
              "DeleteOnTermination": "true"
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -v\n",
                "mkdir -p /home/ec2-user/mongodb \n",
                "cd /home/ec2-user/mongodb \n",
                "# Wait until the NAT initializes and Internet is available \n",
                "until ping -c 1 ietf.org \n",
                "do \n",
                "sleep 5; \n",
                "done \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/orchestrator.sh orchestrator.sh\n",
                "chmod +x orchestrator.sh \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/init.sh init.sh\n",
                "chmod +x init.sh \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n",
                "chmod +x signalFinalStatus.sh \n",
                "#  Run the install \n",
                "#  Store stack name to tag DDB name\n",
                "echo ",
                {
                  "Fn::Join": [
                    "_",
                    [
                      "export TABLE_NAMETAG=",
                      {
                        "Ref": "AWS::StackName"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "export VPC=",
                      {
                        "Ref": "VPC"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "export MongoDBVersion=",
                      {
                        "Ref": "MongoDBVersion"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "#  Store WaitHandler\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "\"",
                      "export WAITHANDLER='",
                      {
                        "Ref": "SecondaryReplicaNode00WaitForNodeInstallWaitHandle"
                      },
                      "'",
                      "\""
                    ]
                  ]
                },
                " >> config.sh\n",
                "./init.sh > install.log 2>&1 \n",
                "#  Cleanup \n",
                "#rm -rf *\n",
                "chown -R ec2-user:ec2-user /home/ec2-user/ \n",
                "# All is well so signal success\n",
                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
              ]
            ]
          }
        },
        "InstanceType": {
          "Ref": "NodeInstanceType"
        }
      }
    },
    "SecondaryReplicaNode1WaitForNodeInstallIO1": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": "SecondaryReplicaNode1NodeInstanceIO1",
      "Condition": "UsePIopsAndIfSecondaryReplicaNode1",
      "Properties": {
        "Handle": {
          "Ref": "SecondaryReplicaNode1WaitForNodeInstallWaitHandle"
        },
        "Timeout": "3600"
      }
    },
    "SecondaryReplicaNode1WaitForNodeInstallGP2": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": "SecondaryReplicaNode1NodeInstanceGP2",
      "Condition": "UseGP2AndIfSecondaryReplicaNode1",
      "Properties": {
        "Handle": {
          "Ref": "SecondaryReplicaNode1WaitForNodeInstallWaitHandle"
        },
        "Timeout": "3600"
      }
    },
    "SecondaryReplicaNode1WaitForNodeInstallWaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle",
      "Properties": {},
      "Condition": "IfSecondaryReplicaNode1"
    },
    "SecondaryReplicaNode1NodeInstanceGP2": {
      "Type": "AWS::EC2::Instance",
      "Condition": "UseGP2AndIfSecondaryReplicaNode1",
      "Metadata": {
        "HostRole": "MongoDB Node"
      },
      "Properties": {
        "KeyName": {
          "Ref": "KeyName"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "InstanceTypeArch",
                {
                  "Ref": "NodeInstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "IamInstanceProfile": "storytools-full",
        "Tags": [
          {
            "Key": "Name",
            "Value": "SecondaryReplicaNode1"
          },
          {
            "Key": "ClusterReplicaSetCount",
            "Value": {
              "Ref": "ClusterReplicaSetCount"
            }
          },
          {
            "Key": "NodeReplicaSetIndex",
            "Value": "2"
          },
          {
            "Key": "ClusterShardCount",
            "Value": {
              "Ref": "ClusterShardCount"
            }
          },
          {
            "Key": "ShardsPerNode",
            "Value": {
              "Ref": "ShardsPerNode"
            }
          },
          {
            "Key": "NodeShardIndex",
            "Value": "-1"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvdg",
            "Ebs": {
              "VolumeType": "io1",
              "DeleteOnTermination": "true",
              "VolumeSize": "25",
              "Iops": "250"
            }
          },
          {
            "DeviceName": "/dev/xvdh",
            "Ebs": {
              "VolumeType": "io1",
              "DeleteOnTermination": "true",
              "VolumeSize": "25",
              "Iops": "200"
            }
          },
          {
            "DeviceName": "/dev/xvdf",
            "Ebs": {
              "VolumeSize": {
                "Ref": "VolumeSize"
              },
              "VolumeType": "gp2",
              "DeleteOnTermination": "true"
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -v\n",
                "mkdir -p /home/ec2-user/mongodb \n",
                "cd /home/ec2-user/mongodb \n",
                "# Wait until the NAT initializes and Internet is available \n",
                "until ping -c 1 ietf.org \n",
                "do \n",
                "sleep 5; \n",
                "done \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/orchestrator.sh orchestrator.sh\n",
                "chmod +x orchestrator.sh \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/init.sh init.sh\n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n",
                "chmod +x signalFinalStatus.sh \n",
                "chmod +x init.sh \n",
                "#  Run the install \n",
                "#  Store stack name to tag DDB name\n",
                "echo ",
                {
                  "Fn::Join": [
                    "_",
                    [
                      "export TABLE_NAMETAG=",
                      {
                        "Ref": "AWS::StackName"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "export MongoDBVersion=",
                      {
                        "Ref": "MongoDBVersion"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "export VPC=",
                      {
                        "Ref": "VPC"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "#  Store WaitHandler\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "\"",
                      "export WAITHANDLER='",
                      {
                        "Ref": "SecondaryReplicaNode1WaitForNodeInstallWaitHandle"
                      },
                      "'",
                      "\""
                    ]
                  ]
                },
                " >> config.sh\n",
                "./init.sh > install.log 2>&1 \n",
                "#  Cleanup \n",
                "#rm -rf *\n",
                "chown -R ec2-user:ec2-user /home/ec2-user/ \n",
                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
              ]
            ]
          }
        },
        "InstanceType": {
          "Ref": "NodeInstanceType"
        }
      }
    },
    "SecondaryReplicaNode1NodeInstanceIO1": {
      "Type": "AWS::EC2::Instance",
      "Condition": "UsePIopsAndIfSecondaryReplicaNode1",
      "Metadata": {
        "HostRole": "MongoDB Node"
      },
      "Properties": {
        "KeyName": {
          "Ref": "KeyName"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "InstanceTypeArch",
                {
                  "Ref": "NodeInstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "IamInstanceProfile": "storytools-full",
        "Tags": [
          {
            "Key": "Name",
            "Value": "SecondaryReplicaNode1"
          },
          {
            "Key": "ClusterReplicaSetCount",
            "Value": {
              "Ref": "ClusterReplicaSetCount"
            }
          },
          {
            "Key": "NodeReplicaSetIndex",
            "Value": "2"
          },
          {
            "Key": "ClusterShardCount",
            "Value": {
              "Ref": "ClusterShardCount"
            }
          },
          {
            "Key": "ShardsPerNode",
            "Value": {
              "Ref": "ShardsPerNode"
            }
          },
          {
            "Key": "NodeShardIndex",
            "Value": "-1"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvdg",
            "Ebs": {
              "VolumeType": "io1",
              "DeleteOnTermination": "true",
              "VolumeSize": "25",
              "Iops": "250"
            }
          },
          {
            "DeviceName": "/dev/xvdh",
            "Ebs": {
              "VolumeType": "io1",
              "DeleteOnTermination": "true",
              "VolumeSize": "25",
              "Iops": "200"
            }
          },
          {
            "DeviceName": "/dev/xvdf",
            "Ebs": {
              "VolumeSize": {
                "Ref": "VolumeSize"
              },
              "VolumeType": "io1",
              "Iops": {
                "Ref": "Iops"
              },
              "DeleteOnTermination": "true"
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -v\n",
                "mkdir -p /home/ec2-user/mongodb \n",
                "cd /home/ec2-user/mongodb \n",
                "# Wait until the NAT initializes and Internet is available \n",
                "until ping -c 1 ietf.org \n",
                "do \n",
                "sleep 5; \n",
                "done \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/orchestrator.sh orchestrator.sh\n",
                "chmod +x orchestrator.sh \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/init.sh init.sh\n",
                "chmod +x init.sh \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n",
                "chmod +x signalFinalStatus.sh \n",
                "#  Run the install \n",
                "#  Store stack name to tag DDB name\n",
                "echo ",
                {
                  "Fn::Join": [
                    "_",
                    [
                      "export TABLE_NAMETAG=",
                      {
                        "Ref": "AWS::StackName"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "export VPC=",
                      {
                        "Ref": "VPC"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "export MongoDBVersion=",
                      {
                        "Ref": "MongoDBVersion"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "#  Store WaitHandler\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "\"",
                      "export WAITHANDLER='",
                      {
                        "Ref": "SecondaryReplicaNode1WaitForNodeInstallWaitHandle"
                      },
                      "'",
                      "\""
                    ]
                  ]
                },
                " >> config.sh\n",
                "./init.sh > install.log 2>&1 \n",
                "#  Cleanup \n",
                "#rm -rf *\n",
                "chown -R ec2-user:ec2-user /home/ec2-user/ \n",
                "# All is well so signal success\n",
                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
              ]
            ]
          }
        },
        "InstanceType": {
          "Ref": "NodeInstanceType"
        }
      }
    },
    "SecondaryReplicaNode01WaitForNodeInstallIO1": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": "SecondaryReplicaNode01NodeInstanceIO1",
      "Condition": "UsePIopsAndIfSecondaryReplicaNode01",
      "Properties": {
        "Handle": {
          "Ref": "SecondaryReplicaNode01WaitForNodeInstallWaitHandle"
        },
        "Timeout": "3600"
      }
    },
    "SecondaryReplicaNode01WaitForNodeInstallGP2": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": "SecondaryReplicaNode01NodeInstanceGP2",
      "Condition": "UseGP2AndIfSecondaryReplicaNode01",
      "Properties": {
        "Handle": {
          "Ref": "SecondaryReplicaNode01WaitForNodeInstallWaitHandle"
        },
        "Timeout": "3600"
      }
    },
    "SecondaryReplicaNode01WaitForNodeInstallWaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle",
      "Properties": {},
      "Condition": "IfSecondaryReplicaNode01"
    },
    "SecondaryReplicaNode01NodeInstanceGP2": {
      "Type": "AWS::EC2::Instance",
      "Condition": "UseGP2AndIfSecondaryReplicaNode01",
      "Metadata": {
        "HostRole": "MongoDB Node"
      },
      "Properties": {
        "KeyName": {
          "Ref": "KeyName"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "InstanceTypeArch",
                {
                  "Ref": "NodeInstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "IamInstanceProfile": "storytools-full",
        "Tags": [
          {
            "Key": "Name",
            "Value": "SecondaryReplicaNode01"
          },
          {
            "Key": "ClusterReplicaSetCount",
            "Value": {
              "Ref": "ClusterReplicaSetCount"
            }
          },
          {
            "Key": "NodeReplicaSetIndex",
            "Value": "2"
          },
          {
            "Key": "ClusterShardCount",
            "Value": {
              "Ref": "ClusterShardCount"
            }
          },
          {
            "Key": "ShardsPerNode",
            "Value": {
              "Ref": "ShardsPerNode"
            }
          },
          {
            "Key": "NodeShardIndex",
            "Value": "0"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvdg",
            "Ebs": {
              "VolumeType": "io1",
              "DeleteOnTermination": "true",
              "VolumeSize": "25",
              "Iops": "250"
            }
          },
          {
            "DeviceName": "/dev/xvdh",
            "Ebs": {
              "VolumeType": "io1",
              "DeleteOnTermination": "true",
              "VolumeSize": "25",
              "Iops": "200"
            }
          },
          {
            "DeviceName": "/dev/xvdf",
            "Ebs": {
              "VolumeSize": {
                "Ref": "VolumeSize"
              },
              "VolumeType": "gp2",
              "DeleteOnTermination": "true"
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -v\n",
                "mkdir -p /home/ec2-user/mongodb \n",
                "cd /home/ec2-user/mongodb \n",
                "# Wait until the NAT initializes and Internet is available \n",
                "until ping -c 1 ietf.org \n",
                "do \n",
                "sleep 5; \n",
                "done \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/orchestrator.sh orchestrator.sh\n",
                "chmod +x orchestrator.sh \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/init.sh init.sh\n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n",
                "chmod +x signalFinalStatus.sh \n",
                "chmod +x init.sh \n",
                "#  Run the install \n",
                "#  Store stack name to tag DDB name\n",
                "echo ",
                {
                  "Fn::Join": [
                    "_",
                    [
                      "export TABLE_NAMETAG=",
                      {
                        "Ref": "AWS::StackName"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "export MongoDBVersion=",
                      {
                        "Ref": "MongoDBVersion"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "export VPC=",
                      {
                        "Ref": "VPC"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "#  Store WaitHandler\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "\"",
                      "export WAITHANDLER='",
                      {
                        "Ref": "SecondaryReplicaNode01WaitForNodeInstallWaitHandle"
                      },
                      "'",
                      "\""
                    ]
                  ]
                },
                " >> config.sh\n",
                "./init.sh > install.log 2>&1 \n",
                "#  Cleanup \n",
                "#rm -rf *\n",
                "chown -R ec2-user:ec2-user /home/ec2-user/ \n",
                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
              ]
            ]
          }
        },
        "InstanceType": {
          "Ref": "NodeInstanceType"
        }
      }
    },
    "SecondaryReplicaNode01NodeInstanceIO1": {
      "Type": "AWS::EC2::Instance",
      "Condition": "UsePIopsAndIfSecondaryReplicaNode01",
      "Metadata": {
        "HostRole": "MongoDB Node"
      },
      "Properties": {
        "KeyName": {
          "Ref": "KeyName"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "InstanceTypeArch",
                {
                  "Ref": "NodeInstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "IamInstanceProfile": "storytools-full",
        "Tags": [
          {
            "Key": "Name",
            "Value": "SecondaryReplicaNode01"
          },
          {
            "Key": "ClusterReplicaSetCount",
            "Value": {
              "Ref": "ClusterReplicaSetCount"
            }
          },
          {
            "Key": "NodeReplicaSetIndex",
            "Value": "2"
          },
          {
            "Key": "ClusterShardCount",
            "Value": {
              "Ref": "ClusterShardCount"
            }
          },
          {
            "Key": "ShardsPerNode",
            "Value": {
              "Ref": "ShardsPerNode"
            }
          },
          {
            "Key": "NodeShardIndex",
            "Value": "0"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvdg",
            "Ebs": {
              "VolumeType": "io1",
              "DeleteOnTermination": "true",
              "VolumeSize": "25",
              "Iops": "250"
            }
          },
          {
            "DeviceName": "/dev/xvdh",
            "Ebs": {
              "VolumeType": "io1",
              "DeleteOnTermination": "true",
              "VolumeSize": "25",
              "Iops": "200"
            }
          },
          {
            "DeviceName": "/dev/xvdf",
            "Ebs": {
              "VolumeSize": {
                "Ref": "VolumeSize"
              },
              "VolumeType": "io1",
              "Iops": {
                "Ref": "Iops"
              },
              "DeleteOnTermination": "true"
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -v\n",
                "mkdir -p /home/ec2-user/mongodb \n",
                "cd /home/ec2-user/mongodb \n",
                "# Wait until the NAT initializes and Internet is available \n",
                "until ping -c 1 ietf.org \n",
                "do \n",
                "sleep 5; \n",
                "done \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/orchestrator.sh orchestrator.sh\n",
                "chmod +x orchestrator.sh \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/init.sh init.sh\n",
                "chmod +x init.sh \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n",
                "chmod +x signalFinalStatus.sh \n",
                "#  Run the install \n",
                "#  Store stack name to tag DDB name\n",
                "echo ",
                {
                  "Fn::Join": [
                    "_",
                    [
                      "export TABLE_NAMETAG=",
                      {
                        "Ref": "AWS::StackName"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "export VPC=",
                      {
                        "Ref": "VPC"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "export MongoDBVersion=",
                      {
                        "Ref": "MongoDBVersion"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "#  Store WaitHandler\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "\"",
                      "export WAITHANDLER='",
                      {
                        "Ref": "SecondaryReplicaNode01WaitForNodeInstallWaitHandle"
                      },
                      "'",
                      "\""
                    ]
                  ]
                },
                " >> config.sh\n",
                "./init.sh > install.log 2>&1 \n",
                "#  Cleanup \n",
                "#rm -rf *\n",
                "chown -R ec2-user:ec2-user /home/ec2-user/ \n",
                "# All is well so signal success\n",
                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
              ]
            ]
          }
        },
        "InstanceType": {
          "Ref": "NodeInstanceType"
        }
      }
    },
    "PrimaryReplicaNode10WaitForNodeInstallIO1": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": "PrimaryReplicaNode10NodeInstanceIO1",
      "Condition": "UsePIopsAndCreateMinTwoShards",
      "Properties": {
        "Handle": {
          "Ref": "PrimaryReplicaNode10WaitForNodeInstallWaitHandle"
        },
        "Timeout": "3600"
      }
    },
    "PrimaryReplicaNode10WaitForNodeInstallGP2": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": "PrimaryReplicaNode10NodeInstanceGP2",
      "Condition": "UseGP2AndCreateMinTwoShards",
      "Properties": {
        "Handle": {
          "Ref": "PrimaryReplicaNode10WaitForNodeInstallWaitHandle"
        },
        "Timeout": "3600"
      }
    },
    "PrimaryReplicaNode10WaitForNodeInstallWaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle",
      "Properties": {},
      "Condition": "CreateMinTwoShards"
    },
    "PrimaryReplicaNode10NodeInstanceGP2": {
      "Type": "AWS::EC2::Instance",
      "Condition": "UseGP2AndCreateMinTwoShards",
      "Metadata": {
        "HostRole": "MongoDB Node"
      },
      "Properties": {
        "KeyName": {
          "Ref": "KeyName"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "InstanceTypeArch",
                {
                  "Ref": "NodeInstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "IamInstanceProfile": "storytools-full",
        "Tags": [
          {
            "Key": "Name",
            "Value": "PrimaryReplicaNode10"
          },
          {
            "Key": "ClusterReplicaSetCount",
            "Value": {
              "Ref": "ClusterReplicaSetCount"
            }
          },
          {
            "Key": "NodeReplicaSetIndex",
            "Value": "0"
          },
          {
            "Key": "ClusterShardCount",
            "Value": {
              "Ref": "ClusterShardCount"
            }
          },
          {
            "Key": "ShardsPerNode",
            "Value": {
              "Ref": "ShardsPerNode"
            }
          },
          {
            "Key": "NodeShardIndex",
            "Value": "1"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvdg",
            "Ebs": {
              "VolumeType": "io1",
              "DeleteOnTermination": "true",
              "VolumeSize": "25",
              "Iops": "250"
            }
          },
          {
            "DeviceName": "/dev/xvdh",
            "Ebs": {
              "VolumeType": "io1",
              "DeleteOnTermination": "true",
              "VolumeSize": "25",
              "Iops": "200"
            }
          },
          {
            "DeviceName": "/dev/xvdf",
            "Ebs": {
              "VolumeSize": {
                "Ref": "VolumeSize"
              },
              "VolumeType": "gp2",
              "DeleteOnTermination": "true"
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -v\n",
                "mkdir -p /home/ec2-user/mongodb \n",
                "cd /home/ec2-user/mongodb \n",
                "# Wait until the NAT initializes and Internet is available \n",
                "until ping -c 1 ietf.org \n",
                "do \n",
                "sleep 5; \n",
                "done \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/orchestrator.sh orchestrator.sh\n",
                "chmod +x orchestrator.sh \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/init.sh init.sh\n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n",
                "chmod +x signalFinalStatus.sh \n",
                "chmod +x init.sh \n",
                "#  Run the install \n",
                "#  Store stack name to tag DDB name\n",
                "echo ",
                {
                  "Fn::Join": [
                    "_",
                    [
                      "export TABLE_NAMETAG=",
                      {
                        "Ref": "AWS::StackName"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "export MongoDBVersion=",
                      {
                        "Ref": "MongoDBVersion"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "export VPC=",
                      {
                        "Ref": "VPC"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "#  Store WaitHandler\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "\"",
                      "export WAITHANDLER='",
                      {
                        "Ref": "PrimaryReplicaNode10WaitForNodeInstallWaitHandle"
                      },
                      "'",
                      "\""
                    ]
                  ]
                },
                " >> config.sh\n",
                "./init.sh > install.log 2>&1 \n",
                "#  Cleanup \n",
                "#rm -rf *\n",
                "chown -R ec2-user:ec2-user /home/ec2-user/ \n",
                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
              ]
            ]
          }
        },
        "InstanceType": {
          "Ref": "NodeInstanceType"
        }
      }
    },
    "PrimaryReplicaNode10NodeInstanceIO1": {
      "Type": "AWS::EC2::Instance",
      "Condition": "UsePIopsAndCreateMinTwoShards",
      "Metadata": {
        "HostRole": "MongoDB Node"
      },
      "Properties": {
        "KeyName": {
          "Ref": "KeyName"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "InstanceTypeArch",
                {
                  "Ref": "NodeInstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "IamInstanceProfile": "storytools-full",
        "Tags": [
          {
            "Key": "Name",
            "Value": "PrimaryReplicaNode10"
          },
          {
            "Key": "ClusterReplicaSetCount",
            "Value": {
              "Ref": "ClusterReplicaSetCount"
            }
          },
          {
            "Key": "NodeReplicaSetIndex",
            "Value": "0"
          },
          {
            "Key": "ClusterShardCount",
            "Value": {
              "Ref": "ClusterShardCount"
            }
          },
          {
            "Key": "ShardsPerNode",
            "Value": {
              "Ref": "ShardsPerNode"
            }
          },
          {
            "Key": "NodeShardIndex",
            "Value": "1"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvdg",
            "Ebs": {
              "VolumeType": "io1",
              "DeleteOnTermination": "true",
              "VolumeSize": "25",
              "Iops": "250"
            }
          },
          {
            "DeviceName": "/dev/xvdh",
            "Ebs": {
              "VolumeType": "io1",
              "DeleteOnTermination": "true",
              "VolumeSize": "25",
              "Iops": "200"
            }
          },
          {
            "DeviceName": "/dev/xvdf",
            "Ebs": {
              "VolumeSize": {
                "Ref": "VolumeSize"
              },
              "VolumeType": "io1",
              "Iops": {
                "Ref": "Iops"
              },
              "DeleteOnTermination": "true"
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -v\n",
                "mkdir -p /home/ec2-user/mongodb \n",
                "cd /home/ec2-user/mongodb \n",
                "# Wait until the NAT initializes and Internet is available \n",
                "until ping -c 1 ietf.org \n",
                "do \n",
                "sleep 5; \n",
                "done \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/orchestrator.sh orchestrator.sh\n",
                "chmod +x orchestrator.sh \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/init.sh init.sh\n",
                "chmod +x init.sh \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n",
                "chmod +x signalFinalStatus.sh \n",
                "#  Run the install \n",
                "#  Store stack name to tag DDB name\n",
                "echo ",
                {
                  "Fn::Join": [
                    "_",
                    [
                      "export TABLE_NAMETAG=",
                      {
                        "Ref": "AWS::StackName"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "export VPC=",
                      {
                        "Ref": "VPC"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "export MongoDBVersion=",
                      {
                        "Ref": "MongoDBVersion"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "#  Store WaitHandler\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "\"",
                      "export WAITHANDLER='",
                      {
                        "Ref": "PrimaryReplicaNode10WaitForNodeInstallWaitHandle"
                      },
                      "'",
                      "\""
                    ]
                  ]
                },
                " >> config.sh\n",
                "./init.sh > install.log 2>&1 \n",
                "#  Cleanup \n",
                "#rm -rf *\n",
                "chown -R ec2-user:ec2-user /home/ec2-user/ \n",
                "# All is well so signal success\n",
                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
              ]
            ]
          }
        },
        "InstanceType": {
          "Ref": "NodeInstanceType"
        }
      }
    },
    "SecondaryReplicaNode10WaitForNodeInstallIO1": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": "SecondaryReplicaNode10NodeInstanceIO1",
      "Condition": "UsePIopsAndIfSecondaryReplicaNode10",
      "Properties": {
        "Handle": {
          "Ref": "SecondaryReplicaNode10WaitForNodeInstallWaitHandle"
        },
        "Timeout": "3600"
      }
    },
    "SecondaryReplicaNode10WaitForNodeInstallGP2": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": "SecondaryReplicaNode10NodeInstanceGP2",
      "Condition": "UseGP2AndIfSecondaryReplicaNode10",
      "Properties": {
        "Handle": {
          "Ref": "SecondaryReplicaNode10WaitForNodeInstallWaitHandle"
        },
        "Timeout": "3600"
      }
    },
    "SecondaryReplicaNode10WaitForNodeInstallWaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle",
      "Properties": {},
      "Condition": "IfSecondaryReplicaNode10"
    },
    "SecondaryReplicaNode10NodeInstanceGP2": {
      "Type": "AWS::EC2::Instance",
      "Condition": "UseGP2AndIfSecondaryReplicaNode10",
      "Metadata": {
        "HostRole": "MongoDB Node"
      },
      "Properties": {
        "KeyName": {
          "Ref": "KeyName"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "InstanceTypeArch",
                {
                  "Ref": "NodeInstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "IamInstanceProfile": "storytools-full",
        "Tags": [
          {
            "Key": "Name",
            "Value": "SecondaryReplicaNode10"
          },
          {
            "Key": "ClusterReplicaSetCount",
            "Value": {
              "Ref": "ClusterReplicaSetCount"
            }
          },
          {
            "Key": "NodeReplicaSetIndex",
            "Value": "1"
          },
          {
            "Key": "ClusterShardCount",
            "Value": {
              "Ref": "ClusterShardCount"
            }
          },
          {
            "Key": "ShardsPerNode",
            "Value": {
              "Ref": "ShardsPerNode"
            }
          },
          {
            "Key": "NodeShardIndex",
            "Value": "1"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvdg",
            "Ebs": {
              "VolumeType": "io1",
              "DeleteOnTermination": "true",
              "VolumeSize": "25",
              "Iops": "250"
            }
          },
          {
            "DeviceName": "/dev/xvdh",
            "Ebs": {
              "VolumeType": "io1",
              "DeleteOnTermination": "true",
              "VolumeSize": "25",
              "Iops": "200"
            }
          },
          {
            "DeviceName": "/dev/xvdf",
            "Ebs": {
              "VolumeSize": {
                "Ref": "VolumeSize"
              },
              "VolumeType": "gp2",
              "DeleteOnTermination": "true"
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -v\n",
                "mkdir -p /home/ec2-user/mongodb \n",
                "cd /home/ec2-user/mongodb \n",
                "# Wait until the NAT initializes and Internet is available \n",
                "until ping -c 1 ietf.org \n",
                "do \n",
                "sleep 5; \n",
                "done \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/orchestrator.sh orchestrator.sh\n",
                "chmod +x orchestrator.sh \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/init.sh init.sh\n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n",
                "chmod +x signalFinalStatus.sh \n",
                "chmod +x init.sh \n",
                "#  Run the install \n",
                "#  Store stack name to tag DDB name\n",
                "echo ",
                {
                  "Fn::Join": [
                    "_",
                    [
                      "export TABLE_NAMETAG=",
                      {
                        "Ref": "AWS::StackName"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "export MongoDBVersion=",
                      {
                        "Ref": "MongoDBVersion"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "export VPC=",
                      {
                        "Ref": "VPC"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "#  Store WaitHandler\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "\"",
                      "export WAITHANDLER='",
                      {
                        "Ref": "SecondaryReplicaNode10WaitForNodeInstallWaitHandle"
                      },
                      "'",
                      "\""
                    ]
                  ]
                },
                " >> config.sh\n",
                "./init.sh > install.log 2>&1 \n",
                "#  Cleanup \n",
                "#rm -rf *\n",
                "chown -R ec2-user:ec2-user /home/ec2-user/ \n",
                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
              ]
            ]
          }
        },
        "InstanceType": {
          "Ref": "NodeInstanceType"
        }
      }
    },
    "SecondaryReplicaNode10NodeInstanceIO1": {
      "Type": "AWS::EC2::Instance",
      "Condition": "UsePIopsAndIfSecondaryReplicaNode10",
      "Metadata": {
        "HostRole": "MongoDB Node"
      },
      "Properties": {
        "KeyName": {
          "Ref": "KeyName"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "InstanceTypeArch",
                {
                  "Ref": "NodeInstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "IamInstanceProfile": "storytools-full",
        "Tags": [
          {
            "Key": "Name",
            "Value": "SecondaryReplicaNode10"
          },
          {
            "Key": "ClusterReplicaSetCount",
            "Value": {
              "Ref": "ClusterReplicaSetCount"
            }
          },
          {
            "Key": "NodeReplicaSetIndex",
            "Value": "1"
          },
          {
            "Key": "ClusterShardCount",
            "Value": {
              "Ref": "ClusterShardCount"
            }
          },
          {
            "Key": "ShardsPerNode",
            "Value": {
              "Ref": "ShardsPerNode"
            }
          },
          {
            "Key": "NodeShardIndex",
            "Value": "1"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvdg",
            "Ebs": {
              "VolumeType": "io1",
              "DeleteOnTermination": "true",
              "VolumeSize": "25",
              "Iops": "250"
            }
          },
          {
            "DeviceName": "/dev/xvdh",
            "Ebs": {
              "VolumeType": "io1",
              "DeleteOnTermination": "true",
              "VolumeSize": "25",
              "Iops": "200"
            }
          },
          {
            "DeviceName": "/dev/xvdf",
            "Ebs": {
              "VolumeSize": {
                "Ref": "VolumeSize"
              },
              "VolumeType": "io1",
              "Iops": {
                "Ref": "Iops"
              },
              "DeleteOnTermination": "true"
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -v\n",
                "mkdir -p /home/ec2-user/mongodb \n",
                "cd /home/ec2-user/mongodb \n",
                "# Wait until the NAT initializes and Internet is available \n",
                "until ping -c 1 ietf.org \n",
                "do \n",
                "sleep 5; \n",
                "done \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/orchestrator.sh orchestrator.sh\n",
                "chmod +x orchestrator.sh \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/init.sh init.sh\n",
                "chmod +x init.sh \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n",
                "chmod +x signalFinalStatus.sh \n",
                "#  Run the install \n",
                "#  Store stack name to tag DDB name\n",
                "echo ",
                {
                  "Fn::Join": [
                    "_",
                    [
                      "export TABLE_NAMETAG=",
                      {
                        "Ref": "AWS::StackName"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "export VPC=",
                      {
                        "Ref": "VPC"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "export MongoDBVersion=",
                      {
                        "Ref": "MongoDBVersion"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "#  Store WaitHandler\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "\"",
                      "export WAITHANDLER='",
                      {
                        "Ref": "SecondaryReplicaNode10WaitForNodeInstallWaitHandle"
                      },
                      "'",
                      "\""
                    ]
                  ]
                },
                " >> config.sh\n",
                "./init.sh > install.log 2>&1 \n",
                "#  Cleanup \n",
                "#rm -rf *\n",
                "chown -R ec2-user:ec2-user /home/ec2-user/ \n",
                "# All is well so signal success\n",
                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
              ]
            ]
          }
        },
        "InstanceType": {
          "Ref": "NodeInstanceType"
        }
      }
    },
    "SecondaryReplicaNode11WaitForNodeInstallIO1": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": "SecondaryReplicaNode11NodeInstanceIO1",
      "Condition": "UsePIopsAndIfSecondaryReplicaNode11",
      "Properties": {
        "Handle": {
          "Ref": "SecondaryReplicaNode11WaitForNodeInstallWaitHandle"
        },
        "Timeout": "3600"
      }
    },
    "SecondaryReplicaNode11WaitForNodeInstallGP2": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": "SecondaryReplicaNode11NodeInstanceGP2",
      "Condition": "UseGP2AndIfSecondaryReplicaNode11",
      "Properties": {
        "Handle": {
          "Ref": "SecondaryReplicaNode11WaitForNodeInstallWaitHandle"
        },
        "Timeout": "3600"
      }
    },
    "SecondaryReplicaNode11WaitForNodeInstallWaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle",
      "Properties": {},
      "Condition": "IfSecondaryReplicaNode11"
    },
    "SecondaryReplicaNode11NodeInstanceGP2": {
      "Type": "AWS::EC2::Instance",
      "Condition": "UseGP2AndIfSecondaryReplicaNode11",
      "Metadata": {
        "HostRole": "MongoDB Node"
      },
      "Properties": {
        "KeyName": {
          "Ref": "KeyName"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "InstanceTypeArch",
                {
                  "Ref": "NodeInstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "IamInstanceProfile": "storytools-full",
        "Tags": [
          {
            "Key": "Name",
            "Value": "SecondaryReplicaNode11"
          },
          {
            "Key": "ClusterReplicaSetCount",
            "Value": {
              "Ref": "ClusterReplicaSetCount"
            }
          },
          {
            "Key": "NodeReplicaSetIndex",
            "Value": "2"
          },
          {
            "Key": "ClusterShardCount",
            "Value": {
              "Ref": "ClusterShardCount"
            }
          },
          {
            "Key": "ShardsPerNode",
            "Value": {
              "Ref": "ShardsPerNode"
            }
          },
          {
            "Key": "NodeShardIndex",
            "Value": "1"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvdg",
            "Ebs": {
              "VolumeType": "io1",
              "DeleteOnTermination": "true",
              "VolumeSize": "25",
              "Iops": "250"
            }
          },
          {
            "DeviceName": "/dev/xvdh",
            "Ebs": {
              "VolumeType": "io1",
              "DeleteOnTermination": "true",
              "VolumeSize": "25",
              "Iops": "200"
            }
          },
          {
            "DeviceName": "/dev/xvdf",
            "Ebs": {
              "VolumeSize": {
                "Ref": "VolumeSize"
              },
              "VolumeType": "gp2",
              "DeleteOnTermination": "true"
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -v\n",
                "mkdir -p /home/ec2-user/mongodb \n",
                "cd /home/ec2-user/mongodb \n",
                "# Wait until the NAT initializes and Internet is available \n",
                "until ping -c 1 ietf.org \n",
                "do \n",
                "sleep 5; \n",
                "done \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/orchestrator.sh orchestrator.sh\n",
                "chmod +x orchestrator.sh \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/init.sh init.sh\n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n",
                "chmod +x signalFinalStatus.sh \n",
                "chmod +x init.sh \n",
                "#  Run the install \n",
                "#  Store stack name to tag DDB name\n",
                "echo ",
                {
                  "Fn::Join": [
                    "_",
                    [
                      "export TABLE_NAMETAG=",
                      {
                        "Ref": "AWS::StackName"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "export MongoDBVersion=",
                      {
                        "Ref": "MongoDBVersion"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "export VPC=",
                      {
                        "Ref": "VPC"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "#  Store WaitHandler\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "\"",
                      "export WAITHANDLER='",
                      {
                        "Ref": "SecondaryReplicaNode11WaitForNodeInstallWaitHandle"
                      },
                      "'",
                      "\""
                    ]
                  ]
                },
                " >> config.sh\n",
                "./init.sh > install.log 2>&1 \n",
                "#  Cleanup \n",
                "#rm -rf *\n",
                "chown -R ec2-user:ec2-user /home/ec2-user/ \n",
                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
              ]
            ]
          }
        },
        "InstanceType": {
          "Ref": "NodeInstanceType"
        }
      }
    },
    "SecondaryReplicaNode11NodeInstanceIO1": {
      "Type": "AWS::EC2::Instance",
      "Condition": "UsePIopsAndIfSecondaryReplicaNode11",
      "Metadata": {
        "HostRole": "MongoDB Node"
      },
      "Properties": {
        "KeyName": {
          "Ref": "KeyName"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "InstanceTypeArch",
                {
                  "Ref": "NodeInstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "IamInstanceProfile": "storytools-full",
        "Tags": [
          {
            "Key": "Name",
            "Value": "SecondaryReplicaNode11"
          },
          {
            "Key": "ClusterReplicaSetCount",
            "Value": {
              "Ref": "ClusterReplicaSetCount"
            }
          },
          {
            "Key": "NodeReplicaSetIndex",
            "Value": "2"
          },
          {
            "Key": "ClusterShardCount",
            "Value": {
              "Ref": "ClusterShardCount"
            }
          },
          {
            "Key": "ShardsPerNode",
            "Value": {
              "Ref": "ShardsPerNode"
            }
          },
          {
            "Key": "NodeShardIndex",
            "Value": "1"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvdg",
            "Ebs": {
              "VolumeType": "io1",
              "DeleteOnTermination": "true",
              "VolumeSize": "25",
              "Iops": "250"
            }
          },
          {
            "DeviceName": "/dev/xvdh",
            "Ebs": {
              "VolumeType": "io1",
              "DeleteOnTermination": "true",
              "VolumeSize": "25",
              "Iops": "200"
            }
          },
          {
            "DeviceName": "/dev/xvdf",
            "Ebs": {
              "VolumeSize": {
                "Ref": "VolumeSize"
              },
              "VolumeType": "io1",
              "Iops": {
                "Ref": "Iops"
              },
              "DeleteOnTermination": "true"
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -v\n",
                "mkdir -p /home/ec2-user/mongodb \n",
                "cd /home/ec2-user/mongodb \n",
                "# Wait until the NAT initializes and Internet is available \n",
                "until ping -c 1 ietf.org \n",
                "do \n",
                "sleep 5; \n",
                "done \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/orchestrator.sh orchestrator.sh\n",
                "chmod +x orchestrator.sh \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/init.sh init.sh\n",
                "chmod +x init.sh \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n",
                "chmod +x signalFinalStatus.sh \n",
                "#  Run the install \n",
                "#  Store stack name to tag DDB name\n",
                "echo ",
                {
                  "Fn::Join": [
                    "_",
                    [
                      "export TABLE_NAMETAG=",
                      {
                        "Ref": "AWS::StackName"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "export VPC=",
                      {
                        "Ref": "VPC"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "export MongoDBVersion=",
                      {
                        "Ref": "MongoDBVersion"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "#  Store WaitHandler\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "\"",
                      "export WAITHANDLER='",
                      {
                        "Ref": "SecondaryReplicaNode11WaitForNodeInstallWaitHandle"
                      },
                      "'",
                      "\""
                    ]
                  ]
                },
                " >> config.sh\n",
                "./init.sh > install.log 2>&1 \n",
                "#  Cleanup \n",
                "#rm -rf *\n",
                "chown -R ec2-user:ec2-user /home/ec2-user/ \n",
                "# All is well so signal success\n",
                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
              ]
            ]
          }
        },
        "InstanceType": {
          "Ref": "NodeInstanceType"
        }
      }
    },
    "PrimaryReplicaNode20WaitForNodeInstallIO1": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": "PrimaryReplicaNode20NodeInstanceIO1",
      "Condition": "UsePIopsAndCreateMinThreeShards",
      "Properties": {
        "Handle": {
          "Ref": "PrimaryReplicaNode20WaitForNodeInstallWaitHandle"
        },
        "Timeout": "3600"
      }
    },
    "PrimaryReplicaNode20WaitForNodeInstallGP2": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": "PrimaryReplicaNode20NodeInstanceGP2",
      "Condition": "UseGP2AndCreateMinThreeShards",
      "Properties": {
        "Handle": {
          "Ref": "PrimaryReplicaNode20WaitForNodeInstallWaitHandle"
        },
        "Timeout": "3600"
      }
    },
    "PrimaryReplicaNode20WaitForNodeInstallWaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle",
      "Properties": {},
      "Condition": "CreateMinThreeShards"
    },
    "PrimaryReplicaNode20NodeInstanceGP2": {
      "Type": "AWS::EC2::Instance",
      "Condition": "UseGP2AndCreateMinThreeShards",
      "Metadata": {
        "HostRole": "MongoDB Node"
      },
      "Properties": {
        "KeyName": {
          "Ref": "KeyName"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "InstanceTypeArch",
                {
                  "Ref": "NodeInstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "IamInstanceProfile": "storytools-full",
        "Tags": [
          {
            "Key": "Name",
            "Value": "PrimaryReplicaNode20"
          },
          {
            "Key": "ClusterReplicaSetCount",
            "Value": {
              "Ref": "ClusterReplicaSetCount"
            }
          },
          {
            "Key": "NodeReplicaSetIndex",
            "Value": "0"
          },
          {
            "Key": "ClusterShardCount",
            "Value": {
              "Ref": "ClusterShardCount"
            }
          },
          {
            "Key": "ShardsPerNode",
            "Value": {
              "Ref": "ShardsPerNode"
            }
          },
          {
            "Key": "NodeShardIndex",
            "Value": "2"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvdg",
            "Ebs": {
              "VolumeType": "io1",
              "DeleteOnTermination": "true",
              "VolumeSize": "25",
              "Iops": "250"
            }
          },
          {
            "DeviceName": "/dev/xvdh",
            "Ebs": {
              "VolumeType": "io1",
              "DeleteOnTermination": "true",
              "VolumeSize": "25",
              "Iops": "200"
            }
          },
          {
            "DeviceName": "/dev/xvdf",
            "Ebs": {
              "VolumeSize": {
                "Ref": "VolumeSize"
              },
              "VolumeType": "gp2",
              "DeleteOnTermination": "true"
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -v\n",
                "mkdir -p /home/ec2-user/mongodb \n",
                "cd /home/ec2-user/mongodb \n",
                "# Wait until the NAT initializes and Internet is available \n",
                "until ping -c 1 ietf.org \n",
                "do \n",
                "sleep 5; \n",
                "done \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/orchestrator.sh orchestrator.sh\n",
                "chmod +x orchestrator.sh \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/init.sh init.sh\n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n",
                "chmod +x signalFinalStatus.sh \n",
                "chmod +x init.sh \n",
                "#  Run the install \n",
                "#  Store stack name to tag DDB name\n",
                "echo ",
                {
                  "Fn::Join": [
                    "_",
                    [
                      "export TABLE_NAMETAG=",
                      {
                        "Ref": "AWS::StackName"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "export MongoDBVersion=",
                      {
                        "Ref": "MongoDBVersion"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "export VPC=",
                      {
                        "Ref": "VPC"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "#  Store WaitHandler\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "\"",
                      "export WAITHANDLER='",
                      {
                        "Ref": "PrimaryReplicaNode20WaitForNodeInstallWaitHandle"
                      },
                      "'",
                      "\""
                    ]
                  ]
                },
                " >> config.sh\n",
                "./init.sh > install.log 2>&1 \n",
                "#  Cleanup \n",
                "#rm -rf *\n",
                "chown -R ec2-user:ec2-user /home/ec2-user/ \n",
                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
              ]
            ]
          }
        },
        "InstanceType": {
          "Ref": "NodeInstanceType"
        }
      }
    },
    "PrimaryReplicaNode20NodeInstanceIO1": {
      "Type": "AWS::EC2::Instance",
      "Condition": "UsePIopsAndCreateMinThreeShards",
      "Metadata": {
        "HostRole": "MongoDB Node"
      },
      "Properties": {
        "KeyName": {
          "Ref": "KeyName"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "InstanceTypeArch",
                {
                  "Ref": "NodeInstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "IamInstanceProfile": "storytools-full",
        "Tags": [
          {
            "Key": "Name",
            "Value": "PrimaryReplicaNode20"
          },
          {
            "Key": "ClusterReplicaSetCount",
            "Value": {
              "Ref": "ClusterReplicaSetCount"
            }
          },
          {
            "Key": "NodeReplicaSetIndex",
            "Value": "0"
          },
          {
            "Key": "ClusterShardCount",
            "Value": {
              "Ref": "ClusterShardCount"
            }
          },
          {
            "Key": "ShardsPerNode",
            "Value": {
              "Ref": "ShardsPerNode"
            }
          },
          {
            "Key": "NodeShardIndex",
            "Value": "2"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvdg",
            "Ebs": {
              "VolumeType": "io1",
              "DeleteOnTermination": "true",
              "VolumeSize": "25",
              "Iops": "250"
            }
          },
          {
            "DeviceName": "/dev/xvdh",
            "Ebs": {
              "VolumeType": "io1",
              "DeleteOnTermination": "true",
              "VolumeSize": "25",
              "Iops": "200"
            }
          },
          {
            "DeviceName": "/dev/xvdf",
            "Ebs": {
              "VolumeSize": {
                "Ref": "VolumeSize"
              },
              "VolumeType": "io1",
              "Iops": {
                "Ref": "Iops"
              },
              "DeleteOnTermination": "true"
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -v\n",
                "mkdir -p /home/ec2-user/mongodb \n",
                "cd /home/ec2-user/mongodb \n",
                "# Wait until the NAT initializes and Internet is available \n",
                "until ping -c 1 ietf.org \n",
                "do \n",
                "sleep 5; \n",
                "done \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/orchestrator.sh orchestrator.sh\n",
                "chmod +x orchestrator.sh \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/init.sh init.sh\n",
                "chmod +x init.sh \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n",
                "chmod +x signalFinalStatus.sh \n",
                "#  Run the install \n",
                "#  Store stack name to tag DDB name\n",
                "echo ",
                {
                  "Fn::Join": [
                    "_",
                    [
                      "export TABLE_NAMETAG=",
                      {
                        "Ref": "AWS::StackName"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "export VPC=",
                      {
                        "Ref": "VPC"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "export MongoDBVersion=",
                      {
                        "Ref": "MongoDBVersion"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "#  Store WaitHandler\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "\"",
                      "export WAITHANDLER='",
                      {
                        "Ref": "PrimaryReplicaNode20WaitForNodeInstallWaitHandle"
                      },
                      "'",
                      "\""
                    ]
                  ]
                },
                " >> config.sh\n",
                "./init.sh > install.log 2>&1 \n",
                "#  Cleanup \n",
                "#rm -rf *\n",
                "chown -R ec2-user:ec2-user /home/ec2-user/ \n",
                "# All is well so signal success\n",
                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
              ]
            ]
          }
        },
        "InstanceType": {
          "Ref": "NodeInstanceType"
        }
      }
    },
    "SecondaryReplicaNode20WaitForNodeInstallIO1": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": "SecondaryReplicaNode20NodeInstanceIO1",
      "Condition": "UsePIopsAndIfSecondaryReplicaNode20",
      "Properties": {
        "Handle": {
          "Ref": "SecondaryReplicaNode20WaitForNodeInstallWaitHandle"
        },
        "Timeout": "3600"
      }
    },
    "SecondaryReplicaNode20WaitForNodeInstallGP2": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": "SecondaryReplicaNode20NodeInstanceGP2",
      "Condition": "UseGP2AndIfSecondaryReplicaNode20",
      "Properties": {
        "Handle": {
          "Ref": "SecondaryReplicaNode20WaitForNodeInstallWaitHandle"
        },
        "Timeout": "3600"
      }
    },
    "SecondaryReplicaNode20WaitForNodeInstallWaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle",
      "Properties": {},
      "Condition": "IfSecondaryReplicaNode20"
    },
    "SecondaryReplicaNode20NodeInstanceGP2": {
      "Type": "AWS::EC2::Instance",
      "Condition": "UseGP2AndIfSecondaryReplicaNode20",
      "Metadata": {
        "HostRole": "MongoDB Node"
      },
      "Properties": {
        "KeyName": {
          "Ref": "KeyName"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "InstanceTypeArch",
                {
                  "Ref": "NodeInstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "IamInstanceProfile": "storytools-full",
        "Tags": [
          {
            "Key": "Name",
            "Value": "SecondaryReplicaNode20"
          },
          {
            "Key": "ClusterReplicaSetCount",
            "Value": {
              "Ref": "ClusterReplicaSetCount"
            }
          },
          {
            "Key": "NodeReplicaSetIndex",
            "Value": "1"
          },
          {
            "Key": "ClusterShardCount",
            "Value": {
              "Ref": "ClusterShardCount"
            }
          },
          {
            "Key": "ShardsPerNode",
            "Value": {
              "Ref": "ShardsPerNode"
            }
          },
          {
            "Key": "NodeShardIndex",
            "Value": "2"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvdg",
            "Ebs": {
              "VolumeType": "io1",
              "DeleteOnTermination": "true",
              "VolumeSize": "25",
              "Iops": "250"
            }
          },
          {
            "DeviceName": "/dev/xvdh",
            "Ebs": {
              "VolumeType": "io1",
              "DeleteOnTermination": "true",
              "VolumeSize": "25",
              "Iops": "200"
            }
          },
          {
            "DeviceName": "/dev/xvdf",
            "Ebs": {
              "VolumeSize": {
                "Ref": "VolumeSize"
              },
              "VolumeType": "gp2",
              "DeleteOnTermination": "true"
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -v\n",
                "mkdir -p /home/ec2-user/mongodb \n",
                "cd /home/ec2-user/mongodb \n",
                "# Wait until the NAT initializes and Internet is available \n",
                "until ping -c 1 ietf.org \n",
                "do \n",
                "sleep 5; \n",
                "done \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/orchestrator.sh orchestrator.sh\n",
                "chmod +x orchestrator.sh \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/init.sh init.sh\n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n",
                "chmod +x signalFinalStatus.sh \n",
                "chmod +x init.sh \n",
                "#  Run the install \n",
                "#  Store stack name to tag DDB name\n",
                "echo ",
                {
                  "Fn::Join": [
                    "_",
                    [
                      "export TABLE_NAMETAG=",
                      {
                        "Ref": "AWS::StackName"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "export MongoDBVersion=",
                      {
                        "Ref": "MongoDBVersion"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "export VPC=",
                      {
                        "Ref": "VPC"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "#  Store WaitHandler\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "\"",
                      "export WAITHANDLER='",
                      {
                        "Ref": "SecondaryReplicaNode20WaitForNodeInstallWaitHandle"
                      },
                      "'",
                      "\""
                    ]
                  ]
                },
                " >> config.sh\n",
                "./init.sh > install.log 2>&1 \n",
                "#  Cleanup \n",
                "#rm -rf *\n",
                "chown -R ec2-user:ec2-user /home/ec2-user/ \n",
                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
              ]
            ]
          }
        },
        "InstanceType": {
          "Ref": "NodeInstanceType"
        }
      }
    },
    "SecondaryReplicaNode20NodeInstanceIO1": {
      "Type": "AWS::EC2::Instance",
      "Condition": "UsePIopsAndIfSecondaryReplicaNode20",
      "Metadata": {
        "HostRole": "MongoDB Node"
      },
      "Properties": {
        "KeyName": {
          "Ref": "KeyName"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "InstanceTypeArch",
                {
                  "Ref": "NodeInstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "IamInstanceProfile": "storytools-full",
        "Tags": [
          {
            "Key": "Name",
            "Value": "SecondaryReplicaNode20"
          },
          {
            "Key": "ClusterReplicaSetCount",
            "Value": {
              "Ref": "ClusterReplicaSetCount"
            }
          },
          {
            "Key": "NodeReplicaSetIndex",
            "Value": "1"
          },
          {
            "Key": "ClusterShardCount",
            "Value": {
              "Ref": "ClusterShardCount"
            }
          },
          {
            "Key": "ShardsPerNode",
            "Value": {
              "Ref": "ShardsPerNode"
            }
          },
          {
            "Key": "NodeShardIndex",
            "Value": "2"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvdg",
            "Ebs": {
              "VolumeType": "io1",
              "DeleteOnTermination": "true",
              "VolumeSize": "25",
              "Iops": "250"
            }
          },
          {
            "DeviceName": "/dev/xvdh",
            "Ebs": {
              "VolumeType": "io1",
              "DeleteOnTermination": "true",
              "VolumeSize": "25",
              "Iops": "200"
            }
          },
          {
            "DeviceName": "/dev/xvdf",
            "Ebs": {
              "VolumeSize": {
                "Ref": "VolumeSize"
              },
              "VolumeType": "io1",
              "Iops": {
                "Ref": "Iops"
              },
              "DeleteOnTermination": "true"
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -v\n",
                "mkdir -p /home/ec2-user/mongodb \n",
                "cd /home/ec2-user/mongodb \n",
                "# Wait until the NAT initializes and Internet is available \n",
                "until ping -c 1 ietf.org \n",
                "do \n",
                "sleep 5; \n",
                "done \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/orchestrator.sh orchestrator.sh\n",
                "chmod +x orchestrator.sh \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/init.sh init.sh\n",
                "chmod +x init.sh \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n",
                "chmod +x signalFinalStatus.sh \n",
                "#  Run the install \n",
                "#  Store stack name to tag DDB name\n",
                "echo ",
                {
                  "Fn::Join": [
                    "_",
                    [
                      "export TABLE_NAMETAG=",
                      {
                        "Ref": "AWS::StackName"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "export VPC=",
                      {
                        "Ref": "VPC"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "export MongoDBVersion=",
                      {
                        "Ref": "MongoDBVersion"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "#  Store WaitHandler\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "\"",
                      "export WAITHANDLER='",
                      {
                        "Ref": "SecondaryReplicaNode20WaitForNodeInstallWaitHandle"
                      },
                      "'",
                      "\""
                    ]
                  ]
                },
                " >> config.sh\n",
                "./init.sh > install.log 2>&1 \n",
                "#  Cleanup \n",
                "#rm -rf *\n",
                "chown -R ec2-user:ec2-user /home/ec2-user/ \n",
                "# All is well so signal success\n",
                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
              ]
            ]
          }
        },
        "InstanceType": {
          "Ref": "NodeInstanceType"
        }
      }
    },
    "SecondaryReplicaNode21WaitForNodeInstallIO1": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": "SecondaryReplicaNode21NodeInstanceIO1",
      "Condition": "UsePIopsAndIfSecondaryReplicaNode21",
      "Properties": {
        "Handle": {
          "Ref": "SecondaryReplicaNode21WaitForNodeInstallWaitHandle"
        },
        "Timeout": "3600"
      }
    },
    "SecondaryReplicaNode21WaitForNodeInstallGP2": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": "SecondaryReplicaNode21NodeInstanceGP2",
      "Condition": "UseGP2AndIfSecondaryReplicaNode21",
      "Properties": {
        "Handle": {
          "Ref": "SecondaryReplicaNode21WaitForNodeInstallWaitHandle"
        },
        "Timeout": "3600"
      }
    },
    "SecondaryReplicaNode21WaitForNodeInstallWaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle",
      "Properties": {},
      "Condition": "IfSecondaryReplicaNode21"
    },
    "SecondaryReplicaNode21NodeInstanceGP2": {
      "Type": "AWS::EC2::Instance",
      "Condition": "UseGP2AndIfSecondaryReplicaNode21",
      "Metadata": {
        "HostRole": "MongoDB Node"
      },
      "Properties": {
        "KeyName": {
          "Ref": "KeyName"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "InstanceTypeArch",
                {
                  "Ref": "NodeInstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "IamInstanceProfile": "storytools-full",
        "Tags": [
          {
            "Key": "Name",
            "Value": "SecondaryReplicaNode21"
          },
          {
            "Key": "ClusterReplicaSetCount",
            "Value": {
              "Ref": "ClusterReplicaSetCount"
            }
          },
          {
            "Key": "NodeReplicaSetIndex",
            "Value": "2"
          },
          {
            "Key": "ClusterShardCount",
            "Value": {
              "Ref": "ClusterShardCount"
            }
          },
          {
            "Key": "ShardsPerNode",
            "Value": {
              "Ref": "ShardsPerNode"
            }
          },
          {
            "Key": "NodeShardIndex",
            "Value": "2"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvdg",
            "Ebs": {
              "VolumeType": "io1",
              "DeleteOnTermination": "true",
              "VolumeSize": "25",
              "Iops": "250"
            }
          },
          {
            "DeviceName": "/dev/xvdh",
            "Ebs": {
              "VolumeType": "io1",
              "DeleteOnTermination": "true",
              "VolumeSize": "25",
              "Iops": "200"
            }
          },
          {
            "DeviceName": "/dev/xvdf",
            "Ebs": {
              "VolumeSize": {
                "Ref": "VolumeSize"
              },
              "VolumeType": "gp2",
              "DeleteOnTermination": "true"
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -v\n",
                "mkdir -p /home/ec2-user/mongodb \n",
                "cd /home/ec2-user/mongodb \n",
                "# Wait until the NAT initializes and Internet is available \n",
                "until ping -c 1 ietf.org \n",
                "do \n",
                "sleep 5; \n",
                "done \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/orchestrator.sh orchestrator.sh\n",
                "chmod +x orchestrator.sh \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/init.sh init.sh\n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n",
                "chmod +x signalFinalStatus.sh \n",
                "chmod +x init.sh \n",
                "#  Run the install \n",
                "#  Store stack name to tag DDB name\n",
                "echo ",
                {
                  "Fn::Join": [
                    "_",
                    [
                      "export TABLE_NAMETAG=",
                      {
                        "Ref": "AWS::StackName"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "export MongoDBVersion=",
                      {
                        "Ref": "MongoDBVersion"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "export VPC=",
                      {
                        "Ref": "VPC"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "#  Store WaitHandler\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "\"",
                      "export WAITHANDLER='",
                      {
                        "Ref": "SecondaryReplicaNode21WaitForNodeInstallWaitHandle"
                      },
                      "'",
                      "\""
                    ]
                  ]
                },
                " >> config.sh\n",
                "./init.sh > install.log 2>&1 \n",
                "#  Cleanup \n",
                "#rm -rf *\n",
                "chown -R ec2-user:ec2-user /home/ec2-user/ \n",
                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
              ]
            ]
          }
        },
        "InstanceType": {
          "Ref": "NodeInstanceType"
        }
      }
    },
    "SecondaryReplicaNode21NodeInstanceIO1": {
      "Type": "AWS::EC2::Instance",
      "Condition": "UsePIopsAndIfSecondaryReplicaNode21",
      "Metadata": {
        "HostRole": "MongoDB Node"
      },
      "Properties": {
        "KeyName": {
          "Ref": "KeyName"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "InstanceTypeArch",
                {
                  "Ref": "NodeInstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "IamInstanceProfile": "storytools-full",
        "Tags": [
          {
            "Key": "Name",
            "Value": "SecondaryReplicaNode21"
          },
          {
            "Key": "ClusterReplicaSetCount",
            "Value": {
              "Ref": "ClusterReplicaSetCount"
            }
          },
          {
            "Key": "NodeReplicaSetIndex",
            "Value": "2"
          },
          {
            "Key": "ClusterShardCount",
            "Value": {
              "Ref": "ClusterShardCount"
            }
          },
          {
            "Key": "ShardsPerNode",
            "Value": {
              "Ref": "ShardsPerNode"
            }
          },
          {
            "Key": "NodeShardIndex",
            "Value": "2"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvdg",
            "Ebs": {
              "VolumeType": "io1",
              "DeleteOnTermination": "true",
              "VolumeSize": "25",
              "Iops": "250"
            }
          },
          {
            "DeviceName": "/dev/xvdh",
            "Ebs": {
              "VolumeType": "io1",
              "DeleteOnTermination": "true",
              "VolumeSize": "25",
              "Iops": "200"
            }
          },
          {
            "DeviceName": "/dev/xvdf",
            "Ebs": {
              "VolumeSize": {
                "Ref": "VolumeSize"
              },
              "VolumeType": "io1",
              "Iops": {
                "Ref": "Iops"
              },
              "DeleteOnTermination": "true"
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -v\n",
                "mkdir -p /home/ec2-user/mongodb \n",
                "cd /home/ec2-user/mongodb \n",
                "# Wait until the NAT initializes and Internet is available \n",
                "until ping -c 1 ietf.org \n",
                "do \n",
                "sleep 5; \n",
                "done \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/orchestrator.sh orchestrator.sh\n",
                "chmod +x orchestrator.sh \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/init.sh init.sh\n",
                "chmod +x init.sh \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n",
                "chmod +x signalFinalStatus.sh \n",
                "#  Run the install \n",
                "#  Store stack name to tag DDB name\n",
                "echo ",
                {
                  "Fn::Join": [
                    "_",
                    [
                      "export TABLE_NAMETAG=",
                      {
                        "Ref": "AWS::StackName"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "export VPC=",
                      {
                        "Ref": "VPC"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "export MongoDBVersion=",
                      {
                        "Ref": "MongoDBVersion"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "#  Store WaitHandler\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "\"",
                      "export WAITHANDLER='",
                      {
                        "Ref": "SecondaryReplicaNode21WaitForNodeInstallWaitHandle"
                      },
                      "'",
                      "\""
                    ]
                  ]
                },
                " >> config.sh\n",
                "./init.sh > install.log 2>&1 \n",
                "#  Cleanup \n",
                "#rm -rf *\n",
                "chown -R ec2-user:ec2-user /home/ec2-user/ \n",
                "# All is well so signal success\n",
                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
              ]
            ]
          }
        },
        "InstanceType": {
          "Ref": "NodeInstanceType"
        }
      }
    },
    "ConfigServerWaitForNodeInstall": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": "ConfigServerReplSetASGroup",
      "Properties": {
        "Handle": {
          "Ref": "ConfigServerWaitForNodeInstallWaitHandle"
        },
        "Timeout": "3600"
      },
      "Condition": "CreateMinOneShard"
    },
    "ConfigServerWaitForNodeInstallWaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle",
      "Properties": {},
      "Condition": "CreateMinOneShard"
    },
 
    "ConfigServerReplSetASGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "VPCZoneIdentifier": [
          {
            "Ref": "PrimaryNodeSubnet"
          },
          {
            "Ref": "Secondary0NodeSubnet"
          },
          {
            "Ref": "Secondary1NodeSubnet"
          }
        ],
        "AvailabilityZones" : { "Fn::FindInMap" : [ "Region2AZ", { "Ref" : "AWS::Region" }, "AZ" ] },
        "LaunchConfigurationName": {
          "Ref": "ConfigServerReplSetLaunchConfig"
        },
        "Tags": [
          {
            "PropagateAtLaunch": "true",
            "Key": "Name",
            "Value": "ConfigServer"
          },
          {
            "PropagateAtLaunch": "true",
            "Key": "ClusterReplicaSetCount",
            "Value": {
              "Ref": "ClusterReplicaSetCount"
            }
          },
          {
            "PropagateAtLaunch": "true",
            "Key": "ClusterShardCount",
            "Value": {
              "Ref": "ClusterShardCount"
            }
          },
          {
            "PropagateAtLaunch": "true",
            "Key": "ConfigServerIndex",
            "Value": "2"
          }
        ],
        "MinSize": "3",
        "MaxSize": "3"
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT15M",
          "Count": "2"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "PauseTime": "PT15M",
          "WaitOnResourceSignals": "true"
        }
      },
      "Condition": "CreateMinOneShard"
    },
    "ConfigServerReplSetLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "Comment": "Install Mongo Config Instance",
        "NodeType": "Config Server",
        "HostRole": "MongoDB Node"
      },
      "Properties": {
        "KeyName": {
          "Ref": "KeyName"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "InstanceTypeArch",
                {
                  "Ref": "NodeInstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "IamInstanceProfile": "storytools-full",
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvdf",
            "Ebs": {
              "VolumeType": "gp2",
              "DeleteOnTermination": "true",
              "VolumeSize": "40"
            }
          }
        ],
        "SecurityGroups": [
          {
            "Ref": "ConfigServerSecurityGrp"
          }
        ],
        "InstanceType": {
          "Ref": "ConfigServerInstanceType"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -v\n",
                "mkdir -p /home/ec2-user/mongodb \n",
                "cd /home/ec2-user/mongodb \n",
                "# Wait until the NAT initializes and Internet is available \n",
                "until ping -c 1 ietf.org \n",
                "do \n",
                "sleep 5; \n",
                "done \n",
                "##curl -OL https://s3-us-west-2.amazonaws.com/rh-public/orchestrator.sh \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/orchestrator.sh orchestrator.sh\n",
                "chmod +x orchestrator.sh \n",
                "##curl -OL https://s3-us-west-2.amazonaws.com/rh-public/init.sh \n",
                "aws s3 cp s3://",
                {
                  "Ref": "BuildBucket"
                },
                "/scripts/init.sh init.sh\n",
                "chmod +x init.sh \n",
                "#  Run the install \n",
                "#  Store stack name to tag DDB name\n",
                "echo ",
                {
                  "Fn::Join": [
                    "_",
                    [
                      "export TABLE_NAMETAG=",
                      {
                        "Ref": "AWS::StackName"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "export VPC=",
                      {
                        "Ref": "VPC"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "echo ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "export MongoDBVersion=",
                      {
                        "Ref": "MongoDBVersion"
                      }
                    ]
                  ]
                },
                " >> config.sh\n",
                "./init.sh \n",
                "#  Cleanup \n",
                "#rm -rf *\n",
                "# All is well so signal success\n",
                "/opt/aws/bin/cfn-signal -e 0 -r \"MongoDB Config Server install success\" '",
                {
                  "Ref": "ConfigServerWaitForNodeInstallWaitHandle"
                },
                "'\n"
              ]
            ]
          }
        }
      }
    }
  }
}
